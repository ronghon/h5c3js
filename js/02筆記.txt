
26運算符優先級========================================================================================
	--同時聲明多個變量並同時賦值,可使用逗號,隔開
	JS運算符優先級:與數學優先級相同,先乘除後加減,如遇需優先計算式,可透過()改變優先執行
27語句===============================================================================================
  JS執行時是按照由上到下,由左到右執行,可以使用{}來進行分組,同一{}中語句稱為一組語句,只具分組作用,無其他用途,
  {}中的內容,在外部是完全可見的

28流程控制語句========================================================================================
  用來控制執行流程,使程序可以依據條件選擇執行,區分為三種：
  1.條件判斷語句--又稱if語句
  	可在執行某段語句前進行判斷,如果條件成立才會執行語句,條件不成立則不執行語句
   	 語法1:
    	if(條件表逹式){
           	語句...
    	} 
    if語句在執行時,會先對條件表逹式進行求值判斷,如果條件表逹式的值為true,則執行if後的語句,如果條件表逹式的值為false,則不會執行if後的語句,
    if語句只能控制緊隨其後的那個語句,如果希望if語句可以控制多條語句,則可使用{}組成一組
29if語法2===============================================================================================
   語法2：
 	  if.... else.. 
   	      規則：先判斷條件是否成立，如成立時則執行語句1,如不成立時則執行語句2
   		if(條件){
	  		語句1;   
  		 }
   		else{
   	 		語句2;
   		}

   語法3:
   if ...else if...else...
   	規則：
   1.執行時,由上到下依序對條件進行判斷,如條件符合則執行該語句,且執行後直接結束語句,如未滿足(false)時,則會繼續往下條件檢查,直到滿足為止,，如果所有條件均不滿足時，則執行else後面語句。
   2.else if 可以多個,但最後else只能一個
   	if(條件1){
    	語句1
   	}else if(條件2){
  		語句2
    }else if(條件3){
 		  語句3
    }else{
    	語句4
    }
30===============================================================================================================   
  prompt()可彈出一帶文本的提示框,以利用戶在文本框內輸入文字,該函數需一個字符串作為參數提示用戶輸入內容,用戶輸入的內容將會作為
  函數的返回值返回,可定義一個變量接收該內容
  var score=prompt("請輸入成績:")

33===============================================================================================================
  2.條件分支語句--也叫switch語句
    語法:switch(條件表逹式){
          case 表逹式:
            	語句1...
							break;
          case 表逹式:
            	語句2...
							break;
          case 表逹式:
            	語句3...
							break;
          default:  
            	語句4...
							break;
        }  
    執行流程:switch...case...語句在執行時會依次將case後表逹式的值和switch後條件表達式的值進行"全等"比較
                            如果比較結果為True,則執行case後之所有語句,因此於各個語句後加入break;(中斷執行退出switch)
                            如果為false,則檢查下一個case後之表逹式的值,以此類推。
           default表示所有條件均不滿足false時執行語句   
  ****switch語句與if語句功能上重覆,意即使用switch可以實現if的功能,反之,if也可以實現switch功能,一般表示兩個分支或者嵌套比較少的
			分支時使用if..else ,如果分支較多情況,則使用switch                    
35循環語句===========================================================================================================
  3.循環語句:通過循環語句可以反復多次執行一段代碼
  	a.while循環--
   	語法:while(條件表逹式){
          	  語句
        	}
   	規則:1.先對條件求值判斷,如為true,則執行語句,再判斷再執行語句,以此類推,如為fasle時則終止循環
        2.如將條件表逹式寫死為true的循環稱為死循環;該循環不會停止,除非關閉瀏覽器來終止循環或加入break中斷

			***創建一個循環三個要件：
			1.初始化變量:i=0
			2.條件判斷:i<10
			3.自增:i++
	
  	b. do...while循環...
		 語法:
  		do {
					語句
  		}
  		while(條件表逹式);
	規則:執行時,會先執行循環體一次,再執行判斷,如果為true則繼續執行語句,然後再判斷-->執行語-->判斷,以此類推
       如果為false時,則中止循環
  **while...與do..while...兩種語法功能類似,但不同的是while...是先條件判斷再執行循環體,而do...while...則先執行一次再條件判斷
    do...while...可保證循環體執行乙次,但while不能
37for循環=======================================================================================================
  	c.語法:for(初始化;條件;自增){
       		語句
       		}
	規則:1.先執行初始化變量(只會執行乙次)
        2.條件表逹式判斷,如為true,則執行語句
        3.執行自增
        4.判斷條件是否仍為true,則繼續執行語句,如為false,則終止循環
39for循環嵌套===================================================================================================
  1.通過for循環輸出一個圖形
  2.九九乘法表練習
  3.取出1-100質數
44break and continue=========================================================================================
  1.break關鍵字可以用來退出switch或循環語句,但不可在if語句中使用break和continue
  2.break會立即終止離它最近的循環語句,如需終止外層循環語句,則可以為循環語句創建一個 label名字:循環語句 來指定外層循環語句
    使用break語句時,可以在break後加上label名字,如此即可終止指定的循環,而不是最近的循環語句
  3.continue可以用來跳過當次循環,默認只會對離它最近的循環起作用,如需跳過外層循環,則與break相同,創建一個label名字:循環語句
****測試性能提昇方法********************
  1.在程序執行前,開啟計時器--->console.time("計時器名字")可以用來開啟一個計時器,它需要一個字串作為參數,以作為計時器的標識
                停止計時器--->console.timeEnd("計時器名字")
  2.檢查j<i 值,僅需到根號i值即可,後面的值可省略
    根號i-->Math.sqrt(i)使用Math.sqrt()對一個數進行開根號