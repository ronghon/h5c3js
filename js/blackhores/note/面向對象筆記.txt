02.兩大編程程序==
	1.面向過程(POP):依照分析好的步驟來解決問題,先分析解決問題所需步驟,再利用函數將這些步驟逐一實現,使用時再依序調用即可
		優點:性能比面向對高,適合與硬體相關的東西
		缺點:没有面向對象易維護、重用與擴展
	
	2.面向對象(OOP):將事務分解成一個個對象(找對象),然後在對象之間分工合作完成(搞對象),以對象的功能來劃分問題,而不是步驟
	  ,明確分工,較靈活代碼可重用,適合多人合作開發的大型軟件項目,具有三個特性:
		1.封裝性
		2.繼承性
		3.多態性:同一個對象在不同的時間可以呈現不同的狀態
		優點:易維護、重用與擴展,由於面向對象有封裝、繼承、多態等特性,可設計出低藕合的系統,使系統更加靈活與易於維護
		缺點:性能較面向過程低
	總結:兩者非互斥,而是互補,可以交互使用,一般簡單、步驟明確者使用面向過程,如果程序較複雜,多人合作大型開發項目使用面向對象
03.ES6中的類和對象==
	面向對象的思考模式:現實生活中：萬物皆對象，對象是一個具體的事件，在JS中，對象是一組無序的相關屬性和方法的集合，所有的事都是對象，如字符串'數組'數值或函數等
	1.抽取對象中共同的屬性和行為封裝成一個類(或模板)
	2.針對類進行實例化,獲取類的對象
	面向對象編程應考慮對象有那些-->歸類劃分,創建對象,使用對象,指揮對象做事情
	-對象:(特定)
		1.指一個具體的事物
		2.在JS中對象是一組相關屬性和方法的集合-->對象是由屬性和方法組成
		  屬性:事物的特徵,對象中的屬性常用名詞來表示
		  方法:事物的行為,在對象中的方法常用動詞來表示
	-類:在ES6中新增的概念,使用class關鍵字聲明一個類,使用這個類來實例化對象
		類-->抽取了對象的公共部份,它泛指某一大類(class),如明星,手機等
		對象-->特指某一個,通過類實例化一個具體的對象,如劉德華,張學友,這支蘋果手機等

04.ES6中創建類和生成實例==
	-創建類語法  
	  class Star{
			//將類中的公共屬性放到constructor中
			constructor(uname,uage)	{
				this.name=uname;  //this指向的新創建的對象實例
				this.age=uage;
			}						 //多個函數方法之間不需要加逗號分隔,	
			sing(song){  //類中的創建方法
				console.log(song)
			}
	  }
		var ldh = new Star('劉德華',36); //透過Star類創建一個ldh對象,具有name和age兩個屬性
		var zxy = new Star('張學友',40); 
		console.log(ldh.name);//劉德華
		console.log(zxy.name);//張學友
		ldh.sing('冰雨');//調用方法-->冰雨
		zxy.sing('李香蘭');//調用方法-->李香蘭

 	-constructor()方法是類的構造函數(默認方法),用於傳遞參數,返回實例對象,通過new命令生成對象時,
	 自動調用該方法,如果没有顯示定義,類內部會自動給我們創建一個constructor()
	
	-創建實例:
	  var xx = new name(); 類必須使用new實例化對象
	-注意事項:
		1.通過class關鍵字創建類,類名習慣性定義首字母大寫
		2.類中有個constructor函數,可接受傳遞過來的參數,同時返回實例對象,所以不用return
		3.constructor函數只要new生成實例時,就會自動調用這個函數,如不寫這個函數,類也會自動生成這個函數
		4.生成實例時new不能省略
		5.創建類時,類名後面不要加小括號,生成實例時,類名後面要加小括號,構造函數不需加function

05.類中添加方法== 	
	1.在類中添加方法時,所有的函數不需要寫function,直接使用 方法名(){功能}即可
	2.多個函數方法之間不需要添加,逗號分隔
	3.調用方法:  對象.方法(實參)

06.類的繼承==extends和super
	1.子類可繼承父類的一些屬性和方法。
	2.子類使用extends來繼承父類的屬性和方法
  	ex:  class Son extends Father{}
	3.使用super關鍵字來訪問和調用父類上的函數,除了父類的構造函數外,也可調用父類的普通函數

07.super調用父類普通函數原則==
	繼承中的屬性和方法查找原則:就近原則
	1.繼承中,如果實例化子類輸出一個方法,先看子類有没有這個方法,如果有就先執行子類的
	2.如果子類中没有這個方法,就去查找父類有没有這個方法,如果有,則執行父類的這個方法(採用就近原則)
	3.配合使用super關鍵字可以調用父類的普通函數