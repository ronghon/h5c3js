02WEB APIs==
  -js組成:ECMAScript基本語法、BOM、DOM(web APIs)
  -Web APIs是JS的應用,是W3C組織的標準,大量使用JS基礎語法做交互效果,是JS獨有部份,主要學習DOM和BOM
03API和Web APIs==
  -API應用程序編程接口,是給程序員提供的一種工具或接口,協助我們更輕鬆實現想要完成的功能,預先定義的函數
  -Web APIs是瀏覽器提供的一套操作瀏覽器功能和頁面元素的API(BOM和DOM),主要針對瀏覽器做交互效果,有很多方法函數
04.DOM目錄
  1.DOM簡介
  2.獲取頁面元素
  3.事件基礎
  4.操作元素
  5.節點操作

05DOM簡介==Document Object Model
  -文檔對象模型(DOM)是W3C組織推薦的處理可擴展標記語言的標準編程接口,通過DOM接口可以改變網頁內容、結構和樣式
  -DOM樹Tree
    文檔:整個頁面就是一個文檔(document)
    元素:頁面中所有標籤都是元素(element)
    節點:網頁中所有內容都是節點(node),包含標籤、屬性、文本、注釋等。
    DOM將以上內容均視為對象(Object物件)
06獲取元素方法==
  1.根據ID獲取:使用getElementById()方法獲取帶有ID的元素對象 document.getElementById('id')
  2.根據標籤名獲取  document.getElementsByTagName('tagname')
  3.通過H5新增的方法獲取
  4.特殊元素獲取
  (1)因為文檔頁面由上往下加載,所以將script寫在body標籤中
  (2)使用getElementById('id')返回的是一個元素對象(Object物件) 利用typeof檢測數據類型可得object元素對象
  (3)使用console.dir()可以返回元素對象及查看裏面的屬性和方法
07根據標籤名獲取元素==
 1.使用getElementsByTagName('div');
  (1)返回的是元素對象的集合,以偽數組形式存儲(arguments)
    var lis=document.getElementsByTagName('li');
  (2)可通過遍歷方式獲取元素對象所有值
		for(var i=0;i<lis.length;i++){
			console.log(lis[i]);
		}
  (3)得到的元素對象是動態的-->內容改變JS不用變動
  (4)如果頁面中只有一個元素,返回的還是偽數組形式
  (5)如果頁面中没有這個元素,返回的空的偽數組形式
  (6)偽數組不可作為element
 2.也可以獲取某個元素(父元素)內部所有指定標籤名的子元素
    element.getElementsByTagName('標籤名');<--父元素必須是指定的單個對象(必須指明是那一個元素對象),獲取時不包括父元素本身
    var ol =document.getElementsByTagName('ol');//[ol]
    console.log(ol[0].getElementsByTagName('li')) 或者使用
    //因為父元素需指明為元素對象,不可為偽數組,所以ol[0]
    var ol = document.getElementById('isol');
    console.log(ol.getElementsByTagName('li'));
08H5新增獲取元素方式==(IE9以上適用)
  1.透過class類名獲取元素
    document.getElementByClassName('類名')<--根據類名獲取元素返回的是元素對象集合(偽數組)
  2.透過選擇器來獲取指定選擇器的第一個元素對象
    document.querySelector('選擇器')-->根據指定選擇器返回"第一個"元素對象,切記:裏面的選擇器需加符號如.box #nav
  3.返回指定選擇器的"所有元素"對象集合,可獲取全部選擇器的元素對象集合
    document.querySelectorAll('選擇器');-->與document.getElementsByTagName(div)或document.getElementByClassName(類名)類似
09獲取特殊元素(body.html)==
	1.獲取body元素
	  document.body  //返回body元素對象
	2.獲取html元素
	  document.documentElement //返回html元素對象
10事件三要素==JS使我們有能力創建動態頁面,而事件是可以被JS偵測到的行為,網頁中的每個元素都可以產生某些可以觸發JS的事件。
	事件簡單說就是用戶與電腦交互的行為,觸發--響應機制,由下列三部份組成(事件三要素)
	1.事件源:事件被觸發的對象(誰被觸發),如按鈕-->who對象(獲取事件源)
	2.事件類型:如何觸發,什麼事件,如鼠標點擊(onclick).鼠標經過.或鍵盤按下(做了什麼觸發事件)(綁定事件)
	3.事件處理程序:通過一個函數賦值的方式來完成(做什麼事情),(輸出部份)如彈出一個對話框
  var oBtn=document.getElementById('btn');
  oBtn.onclick=function(){}
11執行事件的步驟==
	1.獲取事件源
	2.綁定事件(注冊事件)
	3.添加事件處理程序(採取函數賦值形式)
12操作元素==
  JS的DOM操作可以改變網頁內容、結構和樣式,利用DOM操作元素來改變元素中的內容、屬性等
  1.修改頁面元素內容
		(1)element.innerText:從起始位置到終止位置的內容,但它去除html標籤,同時空格和換行也會去掉
		(2)element.innerHTML(w3c):起始位置到終止位置的全部內容,包括html標籤,同時保留空格和換行
  2.操作常見元素屬性:src href title alt等
  3.操作表單元素屬性:type value disabled
  4.操作元素樣式屬性:
    (1)改變的樣式較少時直接使element.style
    (2)直接添加或修改className
13innerText和innerHTML區別==
		1.innerText不識別html標籤,非標準(IE專用),會去除空格和換行
		2.innerHTML可識別html標籤,W3C標準,保留空格和換行-->較常用
		這兩個屬性是可讀寫的,也可以獲取元素裏面的內容
14常用元素的屬性操作==
  1.透過修改src路徑改變顯示圖片
  2.修改title改變顯示內容
16修改表單屬性==
  1.表單中的文字內容是透過value來修改的
  2.某個表單被禁用,不能再被點擊,使用disabled
    ex:btn.disabled=true;  也可以使用this,這個this指向的是事件函數的調用者
17利用flag切換開關作法==仿京東password開關密碼
  核心思路:點擊按鈕,把密碼框類型更改為文本框,但一個按鈕有兩個狀態,此時可利用flag變量來判斷flag的值,如果是1則切換
  為文本框,同時設置flag的值為0,如果是0,就切換為密碼框,flag值設置為1。
19樣式屬性操作==
  1.element.style-->修改行內樣式 如點擊修改樣式:如改變背景顏色、長寛、文字大小...(修改單一樣式時使用)
    注意樣式需採用駝峰命名法 fontSize  backgroundColor  且修改style樣式屬於行內樣式,css權重較高
  2.element.className-->修改類名樣式(修改的樣式較多時可以將它們統一設置在同一的類名中,再藉由添加類名方式改變樣式)
21循環精靈圖:
  利用for循環設置一組元素的精靈圖背景,此一精靈圖排列是有一定規則可循,再藉由循環精靈圖的背景位置background-position
23使用className更改元素樣式==
  1.當樣式較多或功能較複雜時,可以透過修改或添加元素的className
  2.先將所需classname在style內寫好,當觸發事件時,將classname加到標籤中。
  3.注意樣式優先級問題
  4.當原先已有class時,會覆蓋原先的類名,如要保留原來類名,可使用多類名方式添加,就是在原有class後面再加一個新的className
25操作元素總結:
	操作元素是DOM核心內容
		(1)操作元素內容-->innerText   innerHTML
		(2)操作常見元素屬性-->src  href  title  alt等屬性
		(3)操作表單元素屬性-->type value  disabled等屬性
		(4)操作元素樣式屬性-->E.style   className
26排他思想-->首先先排除其他人,然後再設置自己的樣式
  如果同一組元素,如要某一個元素實現某種樣式,則需要使用循環的排他思想,步驟有二
  1.先清除所有元素的全部樣式(幹掉其他人)
  2.再給當前元素設置樣式(留下我自己)
	3.注意順序:先排除其他人,然後再設置自己的樣式
27.網頁換膚效果:核心算法-->把當前圖片的src路徑取過來,給body做為背景即可。
  document.body.style.backgroundImage='url('+this.src+')';
28.表格隔行變色案例:onmouseover鼠標經過  onmouseout鼠標離開
  核心思路:鼠標經過tr行,當前的行改變背景顏色,鼠標離開去掉當前的背景顏色
29.表單全選、取消全選案例
  1.全選與全不選狀態:讓下面所有複選框的checked屬性(選中狀態),跟隨全選按鈕即可
    this.checked 它可以得到當前複選框的選中狀態,true選中,false未選中
    for(var i=0;i<j_tabs.length;i++){
      j_tabs[i].checked=this.checked;
    }
  2.下面所有表單影響全選按鈕
    為下面所有複選框綁定點擊事件,每選擇其中一複選框都循環檢查下面所有的複選框是否全選上,如其
    中一個未選中,則上面全選按鈕就不選中
    var flag=true; //利用一個變量flag控制全選按鈕是否被選中 
    for(var i=0;i<j_tbs.length;i++){
      if(!j_tbs[i].checked){  //假如下面的複選框未全部選中時,全選按鈕的值為false
        flag=false;
        break;  //退出for循環,提高執行效率,只要有一個未選中,其他剩下不用再循環
      }
    }
    j_cbAll.checked=flag;  //下面複選框全選中時,全選按鈕的值為true選中
31自定義屬性操作1
  1.獲取屬性值
    (1)element.屬性:獲取內建屬性值(元素本身自帶的屬性)
    (2)element.getAttribute('屬性'):獲取自定義屬性(程序員自己添加的屬性意即自定義屬性)
32自定義屬性操作2
  2.設置屬性值
    (1)element.屬性='值';  設置內建屬性值
    (2)element.setAttribute('屬性','值');主要針對自定義屬性
  3.移除屬性
    (1)element.removeAttribute('屬性');
33.Tab欄切換案例分析
  利用排他思想為小li綁定點擊事件
36.設置H5自定義屬性:以data-開頭的屬性名並且賦值
  自定義屬性的目的:為了保存並使用數據,可以通過getAttribute('屬性')來獲取,但有些自定義屬性很容易引起歧義,不容易判斷
	是元素內建屬性還是自定義屬性,所以H5規定自定義屬性均以data-開頭做為屬性名並賦值,因此,我們自己設置自定義屬性時也遵循此
	一規範 
	1.設置自定義屬性:
	 (1)直接在元素內設置以data-開頭並賦值  ex: <div data-index="1"> </div>
	 (2)使用JS設置並賦值 element.setAttribute('data-屬性名',屬性值);
  2.獲取H5自定義屬性方式有二:
   (1)element.getAttribute('屬性名');->無兼容性問題
   (2)h5新增獲取自定義屬性方法:element.dataset.屬性名(或使用['屬性名'])->IE11以上支持
    (a)dataset是一個集合,內存放了所有以data開頭的自定義屬性
    (b)如果自定義屬性裏面有多個單詞以-鏈接時,獲取時需採用駝峰命名法
37節點操作
  為什麼學習節點操作?->獲取元素,通常使用兩種方式
  1.利用DOM提供的方法獲取元素->缺點:繁瑣、邏輯性不強  ex:document.getElementById()...
  2.利用節點層級關係獲取元素
    (1)利用父子兄節點關係獲取元素
    (2)邏輯性強,但兼容性較差
  3.節點以node來表示,網頁頁面中所有內容均為節點,HTML DOM樹中的所有節點均可通過Javascript進行訪問
    所有HTML元素(節點)均可被創建、修改或刪除
    (1)節點有:nodeType(節點類型)、nodeName(節點名稱)和nodeValue(節點值)三個基本屬性
    (2)nodeType值元素節點:1  屬性節點:2  文本節點:3(文本節點含文字、空格、換行等)
    (3)節點操作主要是元素節點
38-39節點層級
  1.父節點:node.parentNode 獲取離元素最近的父級節點(親爸爸),如果找不到父節點則返回null
  2.子節點:
    (1)parent.childNodes 注意:獲取的是所有子節點(集合,偽數組),包含文本節點及元素節點等(不提倡)
    (2)parent.children 獲取所有的子元素節點(集合,偽數組,實際開發常用方式),非標準,但各瀏覽器均支持
40獲取第一個子元素或最後一個子元素
    (1)獲取第一個子節點:parent.firstchild-->換行所以是#text
       獲取最後一個子節點:parent.lastchild-->也是換行所以也是#text
    (2)獲取第一個子元素:parentNode.firstElementChild
       獲取最後一個子元素:parentNode.lastElementChild
       有兼容性問題,IE9以上才支持
    (3)實際開發中使用方式:既無兼容性問題又可返回第一個子元素及最後一個元素
       獲取第一個子元素:parent.children[0]
       獲取最後一個子元素:ol.children[ol.children.length - 1]
41下拉菜單
42兄弟節點
  (1)nextSibling:獲取下一個兄弟節點,包含元素節點及文本節點等
     previousSibling:獲取上一個兄弟節點,包含元素節點及文本節點等
  (2)nextElementSibling:直接獲取下一個兄弟元素節點
     previousElementSibling:直接獲取上一個兄弟元素節點
     上述兩個均為IE9以上兼容,解決方法自己封裝一個兼容性函數
     function getNextElementSibling(element){
       var el=element;
       while (el=el.nextSibling){
         if(el.nodeType===1){
           return el;
         }
       }
       return null;
     }
43創建節點
  1.創建元素節點 語法: documnent.creatElement('tagName')  
    documnent.creatElement()方法創建由tagName指定的HTML元素,因為這些元素原先不存在,是根據需求動態生成的,
		所以也稱為動態創建元素節點。
  2.添加子元素節點 語法:node.appendChild(child) node 父級 child 子級 是從後面追加元素,類似數組中的push
    此一方法是將一個節點添加到指定父節點的子節點列表末尾,類似css中的after偽元素
  3.語法:node.insertBefore(child,指定元素) 
    此一方法是將一個節點添加到指定父節點的子節點列表前面,類似css中的before偽元素
    var lili =document.createElement('li');
    ul.insertBefore(lili,ul.children[0])
  總結:在頁面添加一個新的元素兩步驟:
    (1)創建元素:createElement
    (2)添加元素:appendChild(從最後面添加) 或 insertBefore(指定元素的前面)
44簡單版發布留言案例
	1.創建元素節點: document.createElement('元素')
	2.插入內容 li.innerHTML=text.value
	3.添加元素節點 node.appendchild('child子元素')
               node.innerBefore('li',ul.children[0])
	
45刪除節點
  node.removeChild(child) 此方法是DOM中刪除一個子節點,返回刪除的節點, node 父級  child 子級
46刪除留言紀錄,阻止鏈接跳轉使用javascript:;
47複製節點
  node.cloneNode()方法返回調用該方法的節點的一個副本
  (1)如果括號參數為空或false,則為淺拷貝,只複製節點本身,不複製裏面的內容
  (2)如果括號參數為true,則為深拷貝,會複製節點本身及裏面所有的內容
48-53動態生成表格(重點案例多加練習)  
54-55三種動態創建元素區別
  1.document.write():是直接將內容寫入頁面的文檔流,但原先的文檔流已加載完畢,所以它會導致頁面全部重新構建(很少用)
  2.element.innerHTML:是將內容寫入某個DOM節點,不會導致頁面重繪,創建多個元素效率更高(但不要採取字符串拼接,
    而是採取數組形式拼接),結構稍微複雜
  3.document.createElement():創建多個元素效率稍低一點點,但結構較清晰
  總結:不同瀏覽下,innerHTML(採取數組形式)效率比createElement高一些
56DOM重點核心內容回顧***
  1.DOM:文檔對象模型,是W3C推薦處理可擴展標記語言的標準編程接口,透過這些DOM接口可以改變網頁的內容、結構和樣式。
  2.對於Javascript,為了能够使javascript操作HTML,javascript就有了一套自己的DOM編程接口
  3.對於HTML,DOM使得HTML形成了一棵DOM樹,包含文檔、元素、節點。
  4.凡是獲取過來的DOM元素均是一個對象,因此稱為文檔對象模型(Document Object Model)
  對於DOM操作,主要針對元素進行創建、增刪改查,屬性操作及事件操作
  (1)創建新的DOM元素
    1.document.write
    2.innerHTML
    3.createElement
  (2)增
    1.appendChild
    2.insertBefore
  (3)刪  removeChild
  (4)改:主要是修改DOM的元素屬性,DOM元素的內容、屬性、表單的值等。
    1.修改元素屬性:src  href   title等
    2.修改普通元素內容: innerHTML innerText
    3.修改表單元素:value type disabled
    4.修改元素樣式:style(行內樣式) className(樣式較多,添加或修改class)
  (5)查:主要是獲取查詢DOM的元素
    1.DOM提供的API方法:getElementById、getElementsByTagName等古老用法(不太推薦)
    2.H5新增的方法:querySelector、querySelectorAll (提倡)
    3.利用節點操作獲取元素:父(parentNode)、子(children)、兄(previousElementSibling  nextElementSibling)(提倡)
  (6)屬性操作:主要針對自定義屬性
    1.setAttribute:設置DOM的屬性值
    2.getAttribute:獲取DOM的屬性值
    3.removeAttribute:移除屬性
  (7)事件操作:主要是給元素綁定注冊事件,採取事件源、事件類型、事件處理程序三要素執行
    1.onclick:點擊
    2.onmouseover:鼠標經過
    3.onmouseout:鼠標離開
    4.onfocus:獲取鼠標焦點
    5.onblur:失去鼠標焦點
    6.onmousemove:鼠標移動
    7.onmouseup:鼠標彈起
    8.onmousedown:鼠標按下
57事件高級======================================================================================================
	1.注冊事件(綁定事件)
	2.刪除事件(解綁事件)
	3.DOM事件流
	4.事件對象
	5.阻止事件冒泡
	6.事件委托(代理、委派)
	7.常用鼠標事件
	8.常用鍵盤事件
58注冊事件(綁定事件)
  注冊事件區分為兩種:傳統方式及方法監聽注冊方式
  (1)傳統注冊事件:利用on開頭的事件,ex:onclick、onmouseover...具唯一性:同一個元素同一個事件只能設置一個處理函數,最後注
     冊的處理函數將會覆蓋前面注冊的處理函數。
  (2)方法監聽注冊方式:w3c標準,推薦方式,addEventLister()它是一個方法,IE9以前不支持此方法,可使用attachEvent()代替
     特點:同一個元素同一個事件可以添加多個監聽器,依注冊順序依次執行
     addEventListener事件監聽方式 語法:
     目標(監聽)對象.addEventListener(type,listener,[useCapture])->事件監聽方式
     1.type:事件類型字符串,ex:click、mouseover 注意不用加on,要加''號
     2.listener:事件處理函數,事件發生時,會調用該監聽函數 function()
     3.useCapture:可選參數,是一個布尔值,默認為false 
59.attachEvent('onclick',function(){})IE獨有,支持IE9以前-->直接使用傳統注冊事件方式即可取代
60.刪除事件(解綁事件)
  1.傳統解綁方式:
     btn.onclick=null;
  2.addEventListener-->removeEventListener('click', listener)
    注意:不可使用匿名函數,可利用函數關鍵字定義一個函數,然後listener再使用該函數名即可
61.DOM事件流:描述的是從頁面中接收事件的順序,事件發生時會在元素節點之間按照特定的順序傳播,這個事件的傳播過程即DOM事件流
  區分為三個階段:捕獲階段(由上到下,由大到小)、當前目標階段、冒泡階段(由內往外,或由小到大)
  事件捕獲:網景最早提出,由DOM最頂層節點開始,然後逐級向下傳播到最具體的元素接收的過程(document->html->body->element)  
  事件冒泡:IE最早提出,事件開始時由最具體的元素接收,然後逐級向上傳播到DOM最頂層節點的過程(element->body->html->document)
62.DOM事件流注意事項
  1.JS代碼中只能執行捕獲或冒泡其中的一個階段
  2.onclick和attachEvent(IE)只能得到冒泡階段
  3.addEventListener(tyoe,listener[,useCapture])第三個參數如果是true,表示在事件捕獲階段調用事件處理程序,
    如果是false或默認省略未註明時,表示在事件冒泡階段調用事件處理程序
  4.實際開發中,較少使用事件捕獲,較關注事件冒泡階段
  5.有些事件是没有冒泡的,ex:onblur onfocus onmouseenter onmouseleave
  6.事件冒泡有時會帶來麻煩,有時又會很巧妙的做某些事件
63.事件對象***
  1.event就是一個事件對象,寫到監聽函數的小括號中,當形參使用
  2.事件對象只有有了事件才會存在,它是系統自動創建的,不需要傳遞參數-->前提條件
  3.事件對象是與事件一系列相關數據的集合,與事件相關的屬性和方法,ex:鼠標點擊內就包含了鼠標的相關信息(鼠標坐標等),
    如果是鍵盤事件內,就包含鍵盤事件的信息(如判斷用戶按下了那一個鍵)
    (1)傳統注冊事件:
     div.onclick=function(event){
       console.log(event);
     }
    (2)事件監聽方式:
     div.addEventListener('click',function(event){
       console.log(event);
     })
  4.這個事件對象可以自行命名,通常使用event  e  evt等...
  5.事件對象也有兼容性問題,IE678需使用window.event,可使用 e=e || window.event來解決
64.常見事件對象的屬性和方法
  觸發事件的對象(標準寫法:e.target)
  1.e.target:返回的是觸發事件的對象(元素)  VS this 返回的是绑定事件的对象（元素）
  2.target與this的區別: e.target 点击了那个元素，就返回那个元素,而 this 那个元素绑定了这个点击事件,那么就返回谁
  3.IE678 則使用e.srcElement  
  4.與this 相似的屬性currentTarget(了解即可,IE678不支持)   

65.返回事件類型和阻止默認行為
  a.返回事件類型:e.type  ex:click mouseover mouseout
  b.阻止默認行為(事件):就是鏈接不跳轉或讓提交按鈕不提交
    1.e.preventDefault() -->(方法) ->DOM標準寫法  IE9以上
    2.e.returnValue -->(屬性) IE678瀏覽器支持 
    3.return false; 没有兼容性問題,但return後的代碼不執行,且限於使用傳統注冊事件方式onclick
  
66.阻止事件冒泡的兩種方式**
  1.標準寫法:利用事件對象中的stopPropagation() (方法) 代碼寫在具體的元素內 propagation傳播
  2.IE678:e.cancelBubble=true;

67.事件委託(代理、委派)-->事件冒泡應用
  不要給每個子節點單獨設置事件監聽器,而是將事件監聽器設置在其父節點上,然後利用事件冒泡原理影響設置給每個子節點
  事件委托的作用:只操作了一次DOM,提高程序的性能
  ex:給ul注冊點擊事件,然後利用事件對象的target找到當前點擊的li,因為點擊li,事件會冒泡到ul上,ul有注冊事件,就會觸發事件監聽器
  
68.常用鼠標事件
  1.禁止鼠標右鍵菜單:contextmenu 主要控制應該如何顯示上下文菜單,主要用於取消默認的上下文菜單
    用法: document.addEventListener('contextmenu',function(e){
      e.preventDefault();
    })
  2.禁止鼠標選中文字:selectstart 開始選中
    document.addEventListener('selectstart',function(e){
      e.preventDefault();
    })
    
69.鼠標事件對象:MouseEvent 鍵盤事件對象:KeyboardEvent
   常見屬性:獲取坐標值
   1.e.clientX:返回鼠標相對於瀏覽器窗口可視區的X坐標
     e.clientY:返回鼠標相對於瀏覽器窗口可視區的Y坐標
   2.e.pageX:返回鼠標在頁面文檔的X坐標(IE9+支持)
     e.pageY:返回鼠標在頁面文檔的Y坐標
   3.e.screenX:返回鼠標在電腦屏幕的X坐標
     e.screenY:返回鼠標在電腦屏幕的Y坐標
     
70.鼠標移動事件mousemove,藉由鼠標移動事件觸發獲取最新的鼠標座標,並將x和y座標值賦值給圖片的top和left值即可移動圖片

72.常用鍵盤事件
	1.onkeyup   ->按鍵彈起時觸發
	2.onkeydown ->按鍵按下時觸發
	3.onkeypress->按鍵按下時觸發,不能識別功能鍵 ex:shift ctrl alt 左右箭頭
	4.執行順序 keydown->keypress->keyup
  
73.鍵盤事件(keyboardEvent)對象-->e.keyCode
	1.e.keyCode:會返回相應按鍵的ASCII值,能區分大小寫
	2.keyup和keydown事件不区分字母大小写  a 和 A 得到的都是65
	3.keypress事件区分字母大小写  a  97 和 A 得到的是65,但無法識別功能鍵,實際開發中較少用
	4.注意:keydown和keypress在文本框中的特點:這兩個事件觸發時,文字還没有落入文本框中,而keyup事件觸發時,文字已落入文本框中
  
77.BOM瀏覽器對象模型============================================================================================
  1.BOM概述
  2.window對象的常見事件
  3.定時器
  4.JS執行機制
  5.location對象
  6.navigator對象
  7.history對象

78.BOM概述:
	1.瀏覽器對象模型,它提供了獨立於內容而與瀏覽器窗口進行交互的對象,其核心對象是window
	2.BOM昰由一系列相關的對象構成,且每個對象都提供了很多方法和屬性。
	3.BOM缺乏標準,JS語法的標準化組織是ECMA,DOM是W3C,BOM最初是Netscape瀏覽標準的一部份,但目前由各瀏覽器公司自訂標準無統一規範
	4.BOM的頂級對象是window,它具有雙重角色,BOM比DOM更大,它包含了DOM
	  (1)它是JS訪問瀏覽器窗口的一個接口。
	  (2)它是一個全局對象,定義在全局作用域中的變量、函數都會變成window對象的屬性和方法。
	  在調用時可省略window,alert()、prompt()等均屬於window的對象方法。
    查詢window的屬性和方法-->console.dir(window);
	5.window下面包含document  location  navigation  screen  history
  
  DOM                                  BOM
  文檔對象模型                       --> 瀏覽器對象模型
  DOM就是把文檔當做一個對象來看待       --> 把瀏覽器當做一個對象來看待
  DOM的頂級對象是document            --> BOM的頂級對象是window 
  DOM主要學習的是操作頁面元素          --> BOM學習的是瀏覽器窗口交互的一些對象
  DOM是W3C標準規範                   --> BOM是瀏覽器廠商在各自瀏覽器上定義的,兼容性較差

79.window對象常見事件
	1.窗口加載事件:window.onload = function(){} 或者 window.addEventListener('load',function(){})
	  當文檔內容完全加載完成會觸發該事件(包括圖像、腳本文件、CSS等),就調用的處理函數,運用這個方式即可將script寫在頁面的任何地方
	  ,甚至外部文件亦可,但傳統注冊事件方法會有唯一性問題,如果使用addEventListener就無此限制
	2.DOMContentLoaded是DOM加載完畢,不包含圖片、flash css等就可執行,加載速度比load更快些,IE9以上才支持
	  load則需等頁面內容全部加載完畢,包含頁面DOM元素、圖片、flash css等才會執行

80.調整窗口大小事件window.onresize=function(){} 或 window.addEventListener('resize',function(){})
   window.onresize是調整窗口大小加載事件,當觸發時就調用的處理函數
   1.只要窗口大小發生像素變化,就會觸發這個事件
   2.經常利用這個事件執行響應式布局,window.innerWidth獲取當前屏幕的寛度

81.定時器
	window對象提供兩個非常好的方法:setTimeout()、setInterval()
	1.setTimeout():設置一個定時器,該定時器在定時器到期後執行調用函數-->類似定時炸彈。
	  語法:window.setTimeout(調用函數,[延遲的亳秒數])	window可省略 亳秒數可省略,如果省略默認為0(立即執行)
	  用法:
	  (1)setTimeout(function(){
		  console.log('bob!!');      //直接使用匿名函數
	    },2000)
    (2)function callback(){      //取函數名
		  console.log('bob!!');
	     }
		 setTimeout(callback,2000);  //先定義函數,再使用setTimeout再調用該函數(不用加())  提倡使用方式
	  (3)頁面中可能有很多的定時器,因此經常會給定時器添加標識符(名字)來區別不同的定時器
       var timer1=setTimeout(callback,5000);
       var timer2=setTimeout(callback,2000);
        
82.回調函數(callback),回頭調用,等某一事件處理完畢後再回頭調用該函數
   element.onclick=function(){}或者element.addEventListener('click',fn);等注冊事件內的函數也是回調函數	
   案例:設置定時器關閉廣告
   
83.停止setTimeout()定時器:clearTimeout(定時器名字)

84.setInterval()定時器-->會重複調用函數-->經常使用場景:倒數計時器,定時輪播圖
	2.window.setInterval(調用函數,[延遲的亳秒數]),可以重複調用一個函數,每隔一定時間,就去調用一次回調函數,其餘注意事項與
	  setTimeout大致相同,不同之處:調用次數不同-->
	 (1) setTimeout  --> 延遲時間到了就會調用這個回調函数,只調用一次就结束了這個定時器
	 (2) setInterval --> 每隔延遲時間就會調用這個回調函数,會重複調用這個函數很多次

85.倒數計時定時器(重點案例加強練習)

86.停止clearInterval()定時器 -->設置定時器變量時應為全局變量,可先賦值為null(空對象即可)

88.this指向問題:在函數定義時是不確定的,只有函數執行時才能確定this到底指向誰,一般情況下this最終指向的是那個調用它的對象
  1.全局作用域或普通函數中this指向全局對象window(注意:定時器中的this指向window)
  2.方法調用中誰調用this就指向誰(調用者)
  3.構造函數中this指向構造函數的實例對象

89.JS執行隊列
  JS語言的一大特點是一個單線程,同一時間只能做一件事,這是因為JS語誕生的使命所致--JS是為處理頁面中用戶的交互及操作DOM而誕生的,ex:
  對某一DOM元素進行添加和刪除操作,不能同時進行,需先進行添加之後再刪除
  單線程就意味著所有任務均需要排隊,前一個任務結束,才會執行後一個任務,如此導致的問題是:如果JS執行的時間過長,就會造成頁面
  的渲染不連貫,導致頁面渲染加載阻塞的感覺
  為了解決此一問題,H5提出Web Worker標準,允許JS腳本創建多個線程,所以JS中出現了同步和異步功能
  同步:前一個任務結束後再執行後一個任務,程序的執行順序與任務的排列順序是一致的、同步的(同一時間只能做一件事,做完再處理下一件事情)。
  異步:做一件事情時,因為這件事情會花費很長時間,在做這件事情的同時,還可以去處理其他事情(同一時間可以處理很多事情)。
  本質上區別:這個流水線上各個流程的執行順序不同

90.同步和異步
  1.同步任務都在主線程上執行,形成一個執行線
  2.JS的異步是通過回調函數實現的,常見異步任務區分為:
    (1)普通事件:如click、resize等
    (2)資源加載:如load、error等
    (3)定時器:如setInterval、setTimeout等
    異步任務相關回調函數是添加到任務隊列中(任務隊列也稱為消息隊列)
  3.JS執行機制:
    (1)先執行棧中的同步任務
    (2)有異步任務(回調函數)放入任務隊列中不執行
    (3)再執行同步任務,當執行棧中的所有同步任務均執行完畢,系統就會依次序讀取任務隊列中的異步任務,於是被讀取的異步任務結束
       等待狀態,進入執行棧,開始執行。
91.JS執行機制:
  由於主線程不斷的重複獲得任務,執行任務,再獲取任務,再執行,所以這種機制被稱為事件循環(event loop)
92.location對象
  window對象提供一個location屬性用於獲取或設置窗體的URL,並且可以用於解析URL,因為這個屬性返回的是一個對象,所以稱之為location對象
  URL:統一資源定位符,是互聯網上標準資源的地址,互聯網上的每個文件都有一個唯一的URL,它包含的信息指出文件的位置及瀏覽器應該如何處理它。
  protocol:通信協議,如http ftp 等
  location對象常見屬性:
  (1)location.href:獲取或設置整個URL
  (2)location.search:返回參數
94.獲取URL參數數據-->主要練習數據在不同頁面中的傳遞跳轉
	1.利用location.search獲取參數
	2.利用substr('起始的位置'，截取几个字符),去掉?
	3.利用split('=')把字符串分割为数组
	4.運用innerHTML將輸入的資料插入到div頁面中
95.location對象的方法:
	1.location.assign():與href一樣,可以跳轉頁面(重定向頁面),紀錄瀏覽歷史,所以可以實現後退功能
	2.location.replace():替換當前頁面(也可以跳轉頁面),因為不紀錄歷史,所以不能後退頁面
	3.location.reload():重新加載頁面,相當於刷新按鈕或f5,如果參數為true-->強制刷新ctrl+f5
96.navigator對象:包含有關瀏覽器的信息,常用屬性userAgent,該屬性可以返回由客戶機發送服務器的user-agent頭部的值
	藉由下列代碼可以判斷用戶那個終端(PC端或移動端)打開頁面,實現跳轉功能
	location.href="";
97.history對象:主要與瀏覽歷史紀錄進行交互效果,該對象包含用戶(在瀏覽器窗口中)訪問過的URL,主要方法如下:
	1.back():後退功能  history.back()
	2.forward():前進功能  history.forward()
	3.go(參數):具前進後退功能,如果是1 ,前進1個頁面,如果是-1,後退1個頁面  
			前進:  history.go(1)
			後退:  history.go(-1)

98.01pc端網頁特效===============================================================================================
02.元素偏移量offset系列:可以動態獲取該元素的位置(偏移),大小等
	1.獲取元素距離帶有定位父元素的位置
	2.獲取元素自身的大小(寛度和高度)
	3.返回的數值均不帶單位
	4.屬性:
		(1)E.offsetParent:返回作為該元素帶有定位的父級元素,如果父級都没有定位則返回body
		(2)E.offsetTop:返回元素距離帶有定位父元素上方的偏移量,如果没有父級或父級没有定位,則以body為準
		(3)E.offsetLeft:返回元素距離帶有定位父元素左邊的偏移量,如果没有父級或父級没有定位,則以body為準
		(4)E.offsetWidth:返回自身包括padding、邊框、內容區的寛度,返回值不帶單位,當未設置寛度時,可動態獲取寛度
		(5)E.offsetHeight:返回自身包括padding、邊框、內容區的高度,返回值不帶單位
		
		son.offsetParent:返回帶有定位的父級,如没有定位的父級,則返回body
		son.parentNode:返回的父級是最近一級的父級(親爸爸),不管父親有無定位
04.offset與style區別
		offset
		1.offset可獲取任意樣式表中的樣式值
		2.offset系列獲得的數值是没有單位(number)
		3.offsetWidth包含padding+border+width
		4.offsetWidth等屬性是只讀屬性,只能獲取不能賦值
		5.總結:想要獲取元素大小和位置,使用offset更合適,不能改變大小和位置(需使用style)
		
		style
		1.style只能得到行內樣式表中的樣式值
		2.style.width獲得的是帶有單位的字符串(string)
		3.style.width獲得不包含padding和border的值
		4.style.width是可讀寫屬性,可獲取也可賦值
		5.總結:想要給元素更改值,使用style來改變
05.案例:獲取鼠標在盒子內的坐標=鼠标在页面中的坐标（ e.pageX, e.pageY）- 盒子在页面中的距离(box.offsetLeft, box.offsetTop)
06.案例:模態框拖拽
	拖拽觸發事件包括鼠標按下(mousedown)、鼠標移動(mousemove)、鼠標彈起(mouseup)
  拖拽過程分析:鼠標移動過中,獲得最新的值賦值給模態框的left和top值,如此模態框就可跟著鼠標走了
	鼠標按下後獲取鼠標在盒子內的坐標
		var x = e.pageX -login.offsetLeft;
		var y = e.pageY -login.offsetTop;
	鼠標移動時,把鼠標在頁面的坐標減去鼠標在盒子內的坐標就是模態框的left和top值
		login.style.left = e.pageX - x +'px';
		login.style.top = e.pageY - y +'px';
	鼠標彈起,就停止拖拽讓鼠標移動事件解除
	  使用removeEventListener('mousemove',move)
09.仿京東放大鏡案例:


122.動畫函數封裝
  1.動畫實現原理:通過定時器setInterval()不斷移動盒子位置,實現步驟:
		(1)獲取盒子當前位置  -->div.style.left=div.offsetLeft + 1 +'px''
		(2)讓盒子在當前位置加1移動距離
		(3)利用定時器不斷重復這個操作
		(4)需加上一個結束定時器條件,停止動畫本質上就是停止定時器(clearInterval(定時器名)
		(5)注意此元素需添加定位,才能使用E.style.left
	2.動畫函數簡單封裝:注意函數需要傳遞2個參數,動畫對象和移動到的距離

01.緩動動畫原理:就是讓元素運動速度有所變化,最常見的是讓速度慢慢停下來,執行程序:
	1.讓盒子每次移動的距離慢慢變小,速度就會慢慢停下來
	2.核心算法:(目標值-現在的位置)/10  做為每次移動的距離步長
	3.停止條件:讓當前盒子位置等於目標位置就停止定時器
	
	等速動畫就是盒子是當前的位置+固定的值
	緩動動畫就是盒子當前的位置+變化的值((目標值-現在的位置)/10)
	


