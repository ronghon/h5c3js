21數據類型簡介==
	-javascript是一種弱類型語言,意味著不用提前聲明變量的類型,在程序運行過程中,根據等號右邊的值的類型來確認。
	-js屬於動態語,相同的變量可作不同類型的轉換,以最後一個賦值為主。
22數據類型分類==
	基本數據類型:Number、Boolean、String、Null、Underfined
	複合數據類型:Object
23 isNaN==
	isNaN()-->用來判斷值是否為非數字
						true:是非數字
						false:是數字
24字符串String==
	-加單引號或雙引號者,嵌套時外雙內單
	-轉義字符 用\開頭ex:\n:換行  \\斜摃\  \b空格  \t tab縮進
26字符串長度與拼接==
	-檢查並獲取字符串長度時,使用length屬性
	-字符串拼接:任何數據類型與字符串相加時為字符串拼接
30獲取數據類型==
	-使用typeof檢查數據類型
	-使用prompt()取出來的值是字符串類型
31字面量==
	字面量:固定值的表示法
32數據類型轉換1==
  -轉成字符串類型
	toString()-->變量.toString()
	String()-->函數  String(變量)
	加號字符串拼接-->變量+''(空字符串)-->隱式轉換
33 34數據類型轉換2==  
  -轉成數值類型	
	parseInt(string)函數-->將string類型轉成整數數值類型(取整,不會四捨五入進位,由左往右取,遇非數值時就停止)
	parseFloat(string)函數-->將string類型轉成整數或浮點數數值類型(取整或取小數點)
	Number()強制轉換函函數-->將string類型轉成數值類型
	js隠式轉換(- * /)-->利用運算式進行隠式轉換為數值 (-0 *1 /1)

37轉成Boolean==
	'' 0 NaN null undefind -->均轉成false
	其餘值均轉成true
42運算符(操作符)==
	-包括算術  比較  邏輯  賦值  遞增(減)
	-不要直接使用浮點數作為比較判斷是否相等-->浮點數會有精確度問題
43 44 45 46 47表逹式與返回值==
	-表逹式:由數字,運算符,變量等組成的式子
	-將右邉表逹式運算結果返回給左邉的變量,所有表逹式均會有一個結果返回給我們,稱之為返回值
	++變量-->前置自增(先自增,後返回值)
	變量++-->後置自增(先返回原值,後自增)
	(前置自增和後置自增如果單獨使用時,效果相同)
48比較(關係)運算符==
	-會返回布林值(true false)
	 '='賦值,將右邊給左邊	
	 '=='判斷是否相等-->會轉換類型,只要求值是否相等
	 '==='全等-->不會轉換類型,包含值和類型是否全都相同
49邏輯運算符==
	-也是會返回布林值(true false)
	&&'與'-->and-->找false(只要為第一個表逹式返回值為false時即返回false,如為true再進行第二個表逹式判斷) 
	||'或'-->or -->找true	(只要為第一個表逹式返回值為true時即返回true,如為false再進行第二個表逹式判斷)
	! '非'-->not-->取反
51 52短路運算(邏輯中斷)==
	邏輯中斷會影響程序運行結果
	&&(找false)
	表逹式1 && 表逹式2
	如果表逹式1為true,則返回表逹式2
	如果表逹式1為false,則返回表逹式1(表逹式2不會再進行判斷)
	||(找true)
	表逹式1 || 表逹式2
	如果表逹式1為true,則返回表逹式1(表逹式2不會再進行判斷)
	如果表逹式1為false,則返回表逹式2
55流程控制==
	區分為三種-順序結構,分支結構,循環結構
	分支結構-if語句,switch語句
	if (條件表逹式){
		執行語句
	}    
	條件為true-->執行語句
	條件為false-->不執行語句,並跳出if執行後面的代碼
59if else語句雙分支(二選一)==
	if (條件表逹式){
		執行語句1
	} else{
		執行語句2	
	}
	如果條件表逹式為true,則執行語句1,如為false則執行語句2,在這個雙分支語句最終只能有一個語句被執行
60潤年與平年判斷==
	能被4整除且不能整除100者為潤年,或能被400整除的就是潤年
	var year =prompt('請輸入判斷年份');
	if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0){
		alert('你輸入的年份是潤年');		
	} else{
		alert('你輸入的年份是平年');
	}
61if else if(多分支語句)(多選1)==
	多分支語句,就是利用多個條件來選擇不同的語句執行,為多選1的過程
	if (條件表逹式1){
		執行語句1
	}else if(條件表逹式2) {
		執行語句2
	}else if(條件表逹式3) {
		執行語句3
	....	
	}else{
		執行語句n
	}
	如果條件表逹式1成立則執行語句1,執行完畢後退出整個if分支語句
	如果條件表逹式1不成立時,則判斷條件表逹式2,滿足則執行語2,以此類推
	如果所有條件均不滿足都不成立時,則執行else內的語句
	<<注意>>
	1.多分支語句是多選1,最後只能有一個語句被執行
	2.else if 內的條件理論上可以任意多個的
	3.else if 中間有個空格
63三元表逹式==
	條件表逹式 ? 表逹式1 : 表逹式2
	如果條件表逹式成立時,則返回表逹式1的值,否則返回表逹式2的值,意即與二選一的if else簡寫版
	最後將返回值賦值給一個變量即可	
65 66switch語句(匹配選項)==
	針對變量設置一系列的特定值選項時使用switch語句實現多選一,switch轉換開關 case選項,主要利用表逹式的值和case後
	的值相匹配,如匹配成立,就執行case後的語句,如果未匹配上,則繼續下面的case的值匹配,如果都没有匹配上則執行default
	內的語句
	switch(表逹式){
		case 值1 :
		  執行語句1;
		  break;
		case 值2 :
		  執行語句2;
		  break;
		  ...
		default:
		最後的語句;  
	}
	1.通常表達式為一變量
	2.表逹式的值和case後面的值相匹配時,要求需全等,包含值和類型均需一致
	3.如果case後面未加break,則不會退出switch,會繼續下一個case
68if else與switch區別
	1.比較確定值時使用switch,用於判斷或範圍值較大時,使用if else語句
	2.switch語句進行條件判斷後直接執行到程序的條件語句,效率較高,if else語句則有幾個條件,就
	  得判斷多少次
	3.當分支較少時,使用if else的執行效率較switch高一些
69循環語句
  -區分為三個
	1.for 循環
	2.while循環
	3.do while循環
70-循環的目的:可以重覆執行某些語句	
71循環語句(包含循環體(重覆執行的語句)及終止條件)
	for(初始化變量;條件表逹式;操作表逹式){
		循環體
	}
	1.初始化變量就是用var聲明一個變量,通常作為計數器使用,只會執行1次
	2.條件表逹式就是用來決定每次循環是否繼續執行(終止條件)
	3.操作表逹式就是用來更新變量(遞增或遞減)(計數器更新)
	for(var i=0;i<5;i++){
		console.log('hello');
	}
73斷點調試
	F12-->source-->設置斷點-->更新-->F11下一步
75for循環重覆執行不同的代碼,因為有計數器變量i存在,每次循環值i都會變化
81雙重for循環
	for(外層初始化變量;外層條件表逹式;外層操作表逹式){
		for(內層初始化變量;內層條件表逹式;內層操作表逹式){
			執行語句;
		}
	}
	-將內層循環當作是外層循環的執行語句
	-外層循環循環一次,內層循環執行全部
86for循環小結
	1.for 循環可重復執行某些相同代碼。
	2.因為有計數器存在,for循環可重復執行些許不同的代碼。
	3.for 循環可重復執行某些操作,ex:累加操作。
	4.雙重for循環,外層for循環執行循環一次,內層for循環執行全部
87while==
	初始化變量
	while(條件表逹式){
		循環體
		操作表逹式(更新計數器,防止死循環)
	}
	當條件表逹式為true時執行循環體,否則退出循環
	如無操作表逹式時,會使整個循成為死循環
89do while==
	do while是while的變形,該循環會先執行一次循環體,然後再對條件表逹式進行判斷,如為true則
	重復執行循環體,否則退出循環
		初始化變量
		do {
		  循環體
		  操作表逹式
		} while(條件表逹式)
	do while與while 最大不同在於do while會先執行一次循環體再進行條件判斷
91循環小結==
	1.三者之間可相互替代使用
	2.用來計次數與數字相關者,使用for
	3.較複雜的條件判時使用while 或do while
92continue==
	continue關鍵字,退出本次(當前該次的循環),繼續執行剩餘次數的循環
93break==
	break關鍵字用於立即退出整個循環,剩餘的循環不再執行
97數組array==
	一組數據的集合,可存放任意類型的元素,可將一組數據存儲在一個變量下
	使用數組字面量創建數組[],元素之間以,逗號隔開,元素可以是任意數據類型
98獲取數組元素==
	透過數組元素的索引值(從0開始)
99遍歷數組==
	就是獲取數組中所有元素,方法:
		for(var i=0;i<arr.length;i++){
			console.log(arr(i));	
		}
100數組長度length==	
	數組長度是元素個數,arr.length可動態獲取元素個數
114函數概念==
	JS中的函數就是將一段可被重復調用執行的代碼塊封裝起來,日後僅需調用該函數即可,使用函數的目的就是讓大量的代碼重復使用
115函數使用==
	兩大步驟:1.聲明函數	2.調用函數
	1.聲明函數方法:
		function 函數名(){
			函數體
		}
		(1)function聲明函數的關鍵字,全部小寫
		(2)函數是做某件事情,函數名一般是動詞
		(3)函數不調用自己不執行-->口訣
	2.調用函數:函數名()
	函數封裝就好像是快遞打包,將一些具有功能的代碼塊打包到函數中,方便日後執行
117函數參數==
	函數的參數可以有,也可以没有,個數不限
	1.形參:形式上的參數,接收實參傳遞的值,相當於聲明一個變量並給予賦值
	2.實參:實際的值,傳遞給形參
	function 函數名(形參1,形參2...){

	}
	調用函數時,函數名(實參1,實參2...)
118求任意兩個數的和
	function getSum1(num1,num2){
		console.log(num1+num2);
	}
	getSum1(3,5);//8
	求任意兩個數之間的和
119函數參數個數匹配==
	1.實參個數>形參個數-->多餘部份會被省略
	2.實參個數<形參個數-->形參未賦值時結果是undefined
	請注意形參個數=實參個數才對
120函數返回值==
	function 函數名(){
			return 需要返回的結果;
	}
	函數名()
	函數只要遇到return時就會把後面的結果返回給函數的調用者,意即函數名()=return後面的結果,我們可以將函數調用的執行結
	果賦值給一個變量保存起來,如需輸出,則僅需輸出該變量即可。
	function getSum(num1,num2){
		return num1+num2;
	}
	var result=getSum(10,20);
	console.log(result);