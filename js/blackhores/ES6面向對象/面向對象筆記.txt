02.兩大編程程序==
	1.面向過程(POP):依照分析好的步驟來解決問題,先分析解決問題所需步驟,再利用函數將這些步驟逐一實現,使用時再依序調用即可
		優點:性能比面向對高,適合與硬體相關的東西
		缺點:没有面向對象易維護、重用與擴展
	
	2.面向對象(OOP):將事務分解成一個個對象(找對象),然後在對象之間分工合作完成(搞對象),以對象的功能來劃分問題,而不是步驟
	  ,每一個對象都是功能中心,明確分工,較靈活,代碼可重用,適合多人合作開發的大型軟件項目,具有三個特性:
		1.封裝性
		2.繼承性
		3.多態性:同一個對象在不同的時間可以呈現不同的狀態
		優點:易維護、重用與擴展,由於面向對象有封裝、繼承、多態等特性,可設計出低藕合的系統,使系統更加靈活與易於維護
		缺點:性能較面向過程低
	總結:兩者非互斥,而是互補,可以交互使用,一般簡單、步驟明確者使用面向過程,如果程序較複雜,多人合作大型開發項目使用面向對象

03.ES6中的類和對象==
	面向對象的思考模式:
	1.抽取對象中共同的屬性和行為封裝成一個類(或模板)
	2.針對類進行實例化,獲取類的對象
	面向對象編程應考慮對象有那些-->歸類劃分,創建對象,使用對象,指揮對象做事情
	-對象:(特定)現實生活中:萬物皆對象,對象是一個具體的事件,在JS中,對象是一組無序的相關屬性和方法的集合,所有的事都是對象,如字
	 符串、數組、數值或函數等
		1.指一個具體的事物
		2.在JS中對象是一組相關屬性和方法的集合-->對象是由屬性和方法組成
		  屬性:事物的特徵,對象中的屬性常用名詞來表示
		  方法:事物的行為,在對象中的方法常用動詞來表示
	-類(class):在ES6中新增的概念,使用class關鍵字聲明一個類,使用這個類來實例化對象
		類-->抽取了對象的公共部份,它泛指某一大類(class),如明星,手機等
		對象-->特指某一個,通過類實例化獲取類的對象(一個具體的對象),如劉德華,張學友,這支蘋果手機等

04.ES6中創建類和生成實例==
	第1步-創建類  語法: class Star{  }
	第2步-利用new關鍵字創建實例化對象  使用new創建對象 new  Star()
		1.將類中的公共屬性(如:姓名、年齡、性別...)等放到constructor()中
		2.constructor()方法是類的構造函數(默認方法),用於傳遞參數,返回實例對象,通過new命令生成對象時,
	    自動調用該方法,如果没有顯示定義,類內部會自動給我們創建一個constructor()
			constructor(uname,uage)	{  //共同屬性:姓名、年齡、性別...等
				this.name=uname;  //this指向的新創建的實例對象
				this.age=uage;
			}						 //多個函數方法之間不需要加逗號分隔,	
			sing(song){  //類中的創建方法
				console.log(song)
			}
	  }
		var ldh = new Star('劉德華',36); //透過Star類創建一個ldh對象,具有name和age兩個屬性
		var zxy = new Star('張學友',40); 
		console.log(ldh.name);//劉德華
		console.log(zxy.name);//張學友
		ldh.sing('冰雨');//調用方法-->冰雨
		zxy.sing('李香蘭');//調用方法-->李香蘭
 		
	-創建實例:
	  var xx = new name(); 類必須使用new實例化對象
	-注意事項:
		1.通過class關鍵字創建類,類名習慣性定義首字母大寫
		2.類中有個constructor函數,可接受傳遞過來的參數,同時返回實例對象,所以不用return
		3.constructor函數只要new生成實例時,就會自動調用這個函數,如不寫這個函數,類也會自動生成這個函數
		4.生成實例時new不能省略
		5.創建類時,類名後面不要加小括號,生成實例時,類名後面要加小括號,構造函數不需加function

05.類中添加方法== 	
	1.在類中添加方法時,所有的函數不需要寫function,直接使用 方法名(){功能}即可
	2.多個函數方法之間不需要添加,逗號分隔
	3.調用方法:  對象.方法(實參)

06.類的繼承==extends和super
	1.子類可繼承父類的一些屬性和方法,子類使用extends來繼承父類的屬性和方法
  	ex:  class Son extends Father{}
	2.使用super關鍵字來訪問和調用父類上的函數,除了父類的構造函數外,也可調用父類的普通函數

07.super調用父類普通函數原則==
	1.繼承中的屬性和方法查找原則:就近原則(繼承中,如果實例化子類輸出一個方法,先看子類有没有這個方法,如果有就先執行子類的)
	2.如果子類中没有這個方法,就去查找父類有没有這個方法,如果有,則執行父類的這個方法(採用就近原則)
	3.配合使用super關鍵字可以調用父類的普通函數

08.子類可以繼承父類的加法方法,同時也可擴展自己的減法方法-->注意點:子類在構造函數中使用super必須放到子類this之前
	利用super調用父類的構造函數時,super必須在子類this之前調用,意即必須先調用父類的構造方法再使用子類構造方法

09.使用類三個注意點
	1.在ES6中,類没有變量提升,所以必須先定義類class,才能通過類實例化對象
	2.類裏面的共有的屬性和方法一定要加this使用。 
	3.類裏面的this指向問題:
		(1)constructor中的this指向的是創建的實例化對象
	  (2)方法中的this指向的是這個方法的調用者,誰調用this指向誰
	  
11.tab選項卡案例(面向對象版)
	init()初始化操作讓相關的元素綁定事件

	1.點擊tab欄可以切換效果
		toggleTab(){}
	2.點擊+號可以添加tab項和內容項
		addTab(){}
		(1)創建新的選項卡li和新的內容section
			
		(2)把創建的兩個元素追加到對應的父元素中
		  利用E.insertAdjacentHTML('插入位置','插入內容')直接把字符串格式元素添加到父元素中,appendChild不支
			持追加字符串的子元素,insertAdjacentHTML支持追加字符串元素
	3.點擊X號可以刪除當前的tab項和內容項
		removeTab(){}
	4.雙擊tab項文字或者內容項文字,可以修改里面的文字內容
		editTab(){}
14.insertAdjacentHTML('position',Element)把傳入的字串解析成 HTML 或 XML,並把該節點插入到 DOM 樹指定的位置
	可以直接把字符串格式元素添加到父元素中,appendChild不支持追加字符串的子元素,insertAdjacentHTML支持追加字符串元素
	position:
		1.'beforebegin': 在 element 之前。
		2.'afterbegin': 在 element 裡面，第一個子元素之前。
		3.'beforeend': 在 element 裡面，最後一個子元素之後。
		4.'afterend': 在 element 之後。
	Element:要插入DOM樹的字符串

  <div id="one">one</div>
	var d1 = document.getElementById('one');
	d1.insertAdjacentHTML('afterend', '<div id="two">two</div>');在one元素後面插入一個div id='two'
16.解決新創建的li和section無法切換class問題
17.刪除功能
	 1.x没有索引號,但它的父親li有索引號,而它正是我們所需的索引號
	 2.點擊x號可刪除這個索引號對應的li和section	
	 
24.構造函數和原型
	1.概述:在典型的OOP的語言中(如Java),都存在類(class)的概念,類就是對象的模板,對象就是類的實例,但在ES6以前,JS中尚未
	      引入類的概念,在ES6以前,對象不是基於類創建的,而是用一種稱為構造函數來定義對象和它們的特徵。
	2.創建對象三種方式:
		(1)對象字面量: var obj={};
		(2)使用new Objecr(): var obj1=new Object();
		(3)自定義構造函數:function Star(uname,uage){
					this.uname=uname;
					this.uage=uage;
					this.sing=function(){
						console.log('我會唱歌');
					}
				}
				var ldh =new Star('劉德華',18);  //創建劉德華對象
				console.log(ldh);
				ldh.sing();
	3.構造函數:是一種特殊的函數,主要用來初始化對象,即為對象成員變量賦予初始值,它總與new一起使用,經常將對象中的一些公共
		屬性和方法抽取出來,然後封裝到這個函數中,在JS中,使用構造函數時要注意以下兩點:
		(1)構造函數用於創建某一類對象,首字母要大寫。
		(2)構造函數要和new一起使用才有意義
		new在執行時會做四件事情:
		(1)在內存中創建一個新的空對象
		(2)讓this指向這個新的對象
		(3)執行構造函數中的代碼,給這個新對象添加屬性和方法
		(4)返回這個新對象(所以構造函數中不需要return)

25.構造函數中的屬性和方法稱之為成員,成員可以添加
		(1)靜態成員:在構造函數本身上添加的成員,如Star.sex='男',sex即為靜態成員,只能通過構造函數來訪問,如Star.sex,不能通
		   過對象來訪問
	  (2)實例成員:就是在構造函數內部通過this添加的成員(如uname,age,sing),實例成員只能通過實例化的對象來訪問,不可以通過
		   構造函數來訪問實例

26.構造函數原型對象prototype
	1.構造函數的問題:存在浪費內存的問題,我們希望所有的對象使用同一個函數,這樣就比較節省內存,該如何做?==>使用構造函數原型prototype
	2.構造函數通過原型分配的函數是所有對所共享的,在JS中規定,每個構造函數都有一個prototype屬性,指向另一個對象,注意這個prototype就是
	  一個對象,這個對象的所有屬性和方法,都會被構造函數所擁有,可將那些不變的方法,直接定義在prototype對象上,這樣所有對象的實例就可以共
		享這些方法。
	3.原型:一個對象,也稱之為prototype為原型對象,原型的作用是共享方法,一般情況,將公共屬性定義到構造函數中,公共的方法則放到原型對象中

27.對象原型__proto__(屬性)存在於每個對象上且系統自帶的屬性,:每個對象都會有一個屬性__proto__指向構造函數的prototype原型對象,之所以我們對象可以使用構造函數
   prototype原型對象的屬性和方法,就是因為對象有__proto__原型屬性的存在(對象身上系統會自己自動添加一個__proto__原型屬性指向我們構造
	 函數的原型對象prototype),意即構造函數的prototype原型對象與對象自帶的__proto__原型屬性是等價的(ldh.__proto===Star.prototype)
	(1)方法的查找原則:首先先看對象ldh身上是否有sing方法,如果有就執行這個對象上的sing,如果没有sing這個方法,因為有__proto__
	   的存在,就去構造函數原型對象prototype身上去查找sing這個方法
	(2)__proto__對象原型的意義就在於為對象的查找機制提供一個方向,或者說一條路線,但是它是一個非標準屬性,因此實際開發中,不可使
	   用這個屬性,它只是內部指向原型對象prototype

28.constructor構造函數
	對象原型(__proto__)和構造函數(prototype)原型對象中都有一個constructor屬性,constructor稱之為構造函數,因為它指回構造函數本身
	constructor主要用於紀錄該對象引用於那個構造函數,它可以該原型對象重新指向原來的構造函數
	如果我們修改了原來的原型對象,給原型對象賦值的是一個對象,則必須手動的利用constructor指向原來的構造函數
	 Star.prototype = {
      constructor: Star,// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数
      sing: function() {
          console.log('我会唱歌');
      },
      movie: function() {
          console.log('我会演电影');
      }
  }

29.構造函數、實例、原型對象三者之間的關係
	構造函數通過prototype屬性指向原型對象prototype,而原型對象prototype則通過constructor屬性又指回原來的構造函數
	構造函數可以通過對象實例化創建實例化對象,而實例化對象中均有一個__proto__屬性指向原型對象prototype

30.原型對象prototype中也有一個原型__proto__,它指向Object的原型對象,而Object原型對象prototype的__proto__原型為null
   稱之為原型鏈

31.JS的成員查找機制
	1.當訪問一個對象的屬性或方法時,首先查找對象自身有没有該屬性。
	2.如果没有就查找它的原型(也就是__proto__指向的是prototype原型對象)
	3.如果還没有就查找原型對象的原型(Object的原型對象)
	4.依此類推一直找到Object為止(null)
	5.__proto__對象原型的意義就在於為對象成員查找機制提供一個方向或者說是一條路線。

32.原型對象this指向問題
	1.在構造函數中,this指向的是對象實例
	2.原型對象函數中的this指向的是實例對象(函數的調用者)

33.原型對象的應用--擴展內置對象(自定義方法)
	可以通過原型對象,對原來的內置對象進行擴展自定義的方法,比如給數組增加自定義求偶數和的功能。
	注意:數組或字符串內置對象不能給原型對象覆蓋操作 Array.prototype={},只能使用
	Array.prototype.XXX=function(){}方式來追加方法 XXX()

34.繼承
  ES6前並没有extends繼承,需通過構造函數+原型對象模擬實現繼承,稱為組合繼承
	call()方法的作用:
		(1)調用函數
		(2)修改函數運行時的this指向
		語法:  函數名.call(thisArg,arg1,arg2...)
		thisArg:當前調用函數this的指向對象
		arg1,arg2...傳遞的其他參數

35.借用構造函數繼承父類型屬性
	核心原理:通過call()把父類型的this指向子類型的this,這樣就可實現子類型繼承父類型的屬性。
	      // 借用父构造函数继承属性
        // 1. 父构造函数
        function Father(uname, age) {
            // this 指向父构造函数的对象实例
            this.uname = uname;
            this.age = age;
        }
        // 2 .子构造函数 
        function Son(uname, age, score) {
            // this 指向子构造函数的对象实例
            Father.call(this, uname, age);
            this.score = score;
        }
        var son = new Son('刘德华', 18, 100);
        console.log(son);

36.借用構造函數繼承父類型方法


38.ES6以前通過構造函數+原型來實現面向對象編程
  ES6以後使用類(class)來實現面向對象編程,而類的本質:是一個函數function,就是構造函數的另一種寫法
  構造函數的特點:
	1.構造函數有原型對象prototype
	2.構造函數原型對象prototype中有constructor指向構造函數本身
	3.構造函數可以通過原型對象添加方法
	4.構造函數創建的實例對象有__proto__原型屬性指向構造函數的原型對象
	ES6中的類(class)也具有上述特性,新的class寫法只是讓對象原型的寫法更加清晰,更像面向對象編程的語法而已

39.ES5新增方法概述:
	1.數組方法:forEach(),map(),filter(),some(),every()
		(1)forEach:增強版遍歷方法
			array.forEach(function(currentValue,index,arr))
			currentValue:數組當前項的值(每個數組元素的值)
			index:數組當前項的索引
			arr:數組對象本身
		(2)filter()篩選數組方法:用來創建一個新的數組,新數組中的元素是通過檢查指定數組中符合條件的所有元素,主要用於篩選數組
			array.filter(function(currentValue,index,arr))
			注意:filter()方法直接返回的是一個新數組
		(3)some()方法用於檢測數組中的元素是否滿足指定條件,意即查找數組中是否有滿足條件的元素
			array.some(function(currentValue,index,arr))
			注意點:它的返回值是布林值,如果查找到這個元素就返回true,找不到就返回false,如果找到第一個滿足條件的元素,則終止循環
			,不再繼續查找。
			filter是查找滿足條件的元素,返回的一個新數組,而且是把所有滿足條件的元素都返回
			some則是查滿足條件的元素是否存在,返回的是一個布林值,如果查到第一個滿足條件的元素就終止循環
	 案例:
   如果查詢數組中唯一的元素,用some()方法更合適,因為它找到這個元素後,就不再進行循環
	
	forEach和some區別
	1.在forEach中的return不會終止循環,會全部遍歷一遍
	2.,在some中遇到return true就會終止遍歷,效率更高

47.字符串方法:trim()方法用於去除字符串兩側空格,並返回新的字符串

48.Object.defineProperty(obj,prop,descriptor)	用來定義對象中新屬性或修改原來屬性
	obj:必需,要修改的目標對象,可以是任意數據類型
	prop:必需,要定義或修改的屬性名字
	descriptor:必需,目標屬性所擁有的特性說明,以對象形式{}書寫
	(1)value:設置屬性的值,默認為undefined
	(2)writable:值是否可重寫修改,true/false 默認為false-->如id值不可任意修改
	(3)enumerable:目標屬性是否可被枚舉遍歷 true/false 默認為false 通常較私密資料不允許被遍歷顥示
	(4)configurable:目標屬性是否可被刪除或是否可再修改特性 true/false 默認為false

49.對象方法
	1.Object.keys()用於獲取對象自身所有的屬性名,返回的一個數組,如需獲取每個屬性名,可配合forEach遍歷即可
		Object.keys(obj)
		效果類似for...in,它會返回一個由屬性名組成的數組

52.函數進階:
  1.函數定義和調用
		(1)function關鍵字聲明方式(命名函數)	function fn(){}
		(2)函數表逹式(匿名函數)  var fn=function(){}
		(3)利用構造函數 new Function('參數1','參數2','函數體'); 
			var fn=new Function('a','b','console.log(a+b)');
			fn(1,2);//3
			**Function中的參數需使用字符串格式,但執行效率較低,較少使用
			**所有函數都是Function的實例(對象)
			**函數也是對象

53.函數調用方式
	1.普通函數
		function fn() {
       console.log('人生的巅峰');
    }
    fn();   fn.call()
  2.对象的方法
    var o = {
     sayHi: function() {
        console.log('人生的巅峰');
       }
    }
    o.sayHi();
  3.构造函数
    function Star() {};
    new Star();
  4.绑定事件函数
    btn.onclick = function() {};   // 点击了按钮就可以调用这个函数
  5.定时器函数
    setInterval(function() {}, 1000);  这个函数是定时器自动1秒钟调用一次
  6.立即執行函数:立即執行函数是自動調用
    (function() {
      console.log('人生的巅峰');
    })();

54.this指向問題:是當調用函數時確定的,調用的方式不同,決定了this的指向不同,一般情況下指向函數調用者
	1.普通函數:window
	2.構造函數:實例化對象,原型對象中的方法也指向實例對象
	3.對象方法:該方法所屬對象
	4.事件綁定方法:綁定事件對象
	5.定時器函數:window
	6.立即執行函數:window
	 
	  1. 普通函数 this 指向window
        function fn() {
            console.log('普通函数的this' + this);
        }
        window.fn();
    2. 對象的方法 this指向的是對象 o
        var o = {
            sayHi: function() {
                console.log('对象方法的this:' + this);
            }
        }
        o.sayHi();
    3. 構造函數 this 指向 ldh 這個實例對象 原型對象里面的this 指向的也是 ldh 這個實例對象
        function Star() {};
        Star.prototype.sing = function() {

        }
        var ldh = new Star();
    4. 绑定事件函數 this 指向的是函數的調用者 btn 這個按鈕對象
        var btn = document.querySelector('button');
        btn.onclick = function() {
            console.log('绑定时间函数的this:' + this);
        };
    5. 定時器函數 this 指向的也是window
        window.setTimeout(function() {
            console.log('定時器的this:' + this);

        }, 1000);
    6. 立即執行函數 this 還是指向window
        (function() {
            console.log('立即執行函數的this' + this);
        })();

55.改變函數內部this指向:常用的有bind()、call()、apply()三種方法
	1.call():可用來調用函數,也可改變this指向,主要作用可以實現繼承
		call(this指向對象,形參1,形參2);
	2.apply():可用來調用函數,也可改變this指向,主要應用於求數組中的最大值
	  apply(this指向對象,[array數組])
		var arr = [1, 66, 3, 99, 4];
    var arr1 = ['red', 'pink'];
    // var max = Math.max.apply(null, arr);
    var max = Math.max.apply(Math, arr);
    var min = Math.min.apply(Math, arr);
    console.log(max, min);
	3.bind()綁定之意:不可調用函數,但可改變函數內部this指向
		bind(this指向對象,arg1,arg2,...)
		返回值由指定的this值和初始化參數改造的原函數拷貝(產生新函數)
		主要應用:如果有的函數不需要立即調用,且需改變函數內部this指向時可使用bind()
		例如:點擊按鈕後就禁用這個按鈕,3秒鐘後開啟這個按鈕,
		var btns = document.querySelectorAll('button');
        for (var i = 0; i < btns.length; i++) {
            btns[i].onclick = function() {
                this.disabled = true;
                setTimeout(function() {
                 中 this.disabled = false;
                }.bind(this), 2000);  //這個this指向的是btn這個對象
            }
        }
60.call、apply、bind總結
	1.相同點:都可改變函數內部的this指向
	2.區別:
		(1)call和apply會調用函數,且需改變函數內部this指向
		(2)call和apply傳遞的參數不同,call參數為arg1,arg2...形式,apply必須為數組形式
		(3)bind不會調用函數,但可改變函數內部this指向
	3.主要應用場景:
		(1)call經常使用在繼承
		(2)apply經常與數組有關係,如借助數學對象實現數組最大值最小值
		(3)bind不調用函數,但要改變this指向時使用,如改變定時器內部的this指向
61.嚴格模式ES5的嚴格模式採用具有限制性JS變體的一種方式,即在嚴格的條件下運行JS代碼,IE10以上支持
	1.消除JS語法中不合理、不嚴謹之處,減少一些怪異行為
	2.消除代碼運行的一些不安全之處,保證代碼運行的安全
	3.提高編譯器效率,增加運行速度
	4.禁用在ECMAScript的未來版本中可能會定義的一些語法,為未來新版本的JS做好舖墊,如一些保留字:class enum entends
		export import super不能做變量名使用
	5.開啟嚴格模式
	  嚴格模式可應到整個腳本或個別函數中,在使用時,將嚴格模式區分為腳本開啟嚴格模式及函數開啟嚴格模式兩種
		1.為整個腳本開啟:'use strict';
		2.為某個函數開啟嚴格模式:
		<script>
        // 此時只為fn函數開啟嚴格模式
        function fn() {
            'use strict'; // 下面的代碼按照嚴格模式執行
        }
				//函數外部仍按普通模式執行
        function fun() {
            // 里面的還是按照普通模式執行
        }
    </script>
62.嚴格模式的變化
	1.變量:
		(1)變量名需先聲明再使用,否則報錯
		(2)嚴禁刪除已經聲明的變量,如deldte X;-->會報錯
	2.this指向問題:
		(1)在嚴格模式下全局作用域中函數的this是undefined(非嚴格模式下指向window)
		(2)嚴格模式下,如果構造函數不加new調用,則當普通函數使用this會報錯
		(3)new實例化的構造函數指向創建的對象實例
		(4)定時器this還是指向window
		(5)事件、對象還是指向調用者
	3.函數:
		(1)函數不能有重名的參數
		(2)不允許在非函數的代碼塊內聲門函數
			如if(true){
				function(){}-->會報錯
				}
			for(var i=0;i<5;i++){
				function(){} -->會報錯
			}	
			function(){
				function(){}-->合法語法
			}
	
63.高階函數:對其他函數進行操作的函數,它接收函數作為參數或將函數作為返回值輸出
	 函數也是一種數據類型,同樣可以作為參數,傳遞給另一個參數使用,最典型的就是回調函數
64.閉包(closure)
  變量作用域:
	變量依作用域不同分為全局變量和局部變量	
	1.函數內部可以使用全局變量
	2.函數外部不可以使用局部變量
	3.當函數執行完畢,本作用域內的局部變量會銷毁
	閉包:指有權訪問另一個函數作用域中變量的函數-->閉包是一個函數
		簡言之就是一個作用域可以訪問另外一個函數內部的局部變量

65.閉包的主要作用:延伸了變量的作用範圍

6.遞歸

78.正則表逹式(Regular Expression):是用於匹配符串中字符組合的模式,在JS中,正則表達式也是對象。
	作用:
	1.驗證表單:
	2.替換敏感詞、關鍵詞
	3.從字符串中獲取特定部份

79.創建正則表達式
	1.通過調用RegExp對象的構造函數
		var 變量名 = new RegExp(/表達式/);  
		var regexp = new RegExp(/123/);
	2.通過字面量創建
		var 變量名 = /表達式/;
		var reg = /123/;
	test()用於檢測字符串是否符合正則表達式要求的規範,符合會返回true或不符合返回false,參數是測試字符串。
	regObj.test(str)-->true/false
	regObj:正則表達式   str:要測試的文本

80.正則表達式的組成
	1.一個正則表達式可以由簡單的字符構成,如/abc/,也可以由簡單和特殊字符的組合,如/ab*c/,其中特殊字符也稱為
	  元字符,在正則表達式中是具有特殊意義的專用符號,如^、$、+等
	2.邊界符:^ $  用來提示字符所處的位置,如果^和$一起使用,表示必須精確匹配
		(1)正則表達式中不需加引號,不管是數字型或字符串型
		(2)/^abc/  ^開頭符號  以abc開頭均符合  表示匹配行首的文本(以誰開頭)
		(3)/abc&/  $結尾符號	以abc結尾       表示匹配行尾的文本(以誰結束)
		(4)/^abc$/  精確匹配,只有abc才符合規範
		(5)/abc/    只要包含abc三個字母連在一起就符合規範,不論放在那個位置,abd-false ddabc-true sdabcab-true

81.字符類:[]中括號:表示有一系列字符可供選擇,只要匹配其中一個就可以
  var reg=/[abc]/;  表示只要包含有a 或 b 或 c 都會返回true
	var reg1=/^[abc]$/;  表示三選一,只有是 a 或 b 或 c 三個字母才返回true
	加上 - 表示方括號內部範圍符 /^[a-z]$/ 表示a到z 26個英文字母任何一個字母返回均為true

82.字符類(下)
  1.字符組合:/^[a-zA-Z]$/  表示任一英文字母大小寫均返回true(多選一)
  2.[^a-zA-Z] 如果中括號中有 ^ 表示取反的意思,千萬和我们邊界符 ^ 别混淆,表示任一英文字母大小寫均返回false,其餘true

83.量詞符:用來設定某個模式出現的次數
  1. * 相當於 >= 0 可以出现0次或者很多次
	2. + 相當於 >= 1 可以出现1次或者很多次(不包括0次)
	3. ? 相當於 1 || 0 只有在出現1次或0次時為true其餘為false
	4.{3} 表示只有在重複3次情況下為true
	5.{3,}  >=3  表示只有在重複3次以上情況為true
	6.{3,16}  >=3 並且 <=16

84./^[a-zA-Z0-9_-]{6,16}$/ 表示驗證用戶輸入的限定為英文字母、數字及-_等組合,長度3-6位數
	{3,6}中間不可以加空格
	andy!007-->false  因為包含! 不符合模式規範
	andy    -->false  因為位數4位,不符合6-16位數規範

86.括號總結:
	1.中括號[]:字符組合,表示匹配方括號中的任意字符,多選一
	2.大括號{}:量詞符,大括號中的數字表示重複次數
	3.小括號():表示優先級

87.預定義類:
	\d 匹配0-9之間的任一數字,相當於[0-9]
	\D 匹配0-9以外的字符,相當於[^0-9]
	\w 匹配任意的字母、數字和下劃線,相當於[a-zA-Z0-9]
	\W 除所字母、數字和下劃線之外的字符,相當於[^a-zA-Z0-9]
 	\s 匹配空格(包括換行符、制表符、空格符),相當於[\t\r\n\v\f]
	\S 匹配非空格的字符,相當於[^\t\r\n\v\f]



91.ES6簡介:ECMAScript ES6實際上是一個泛指,泛指ES2015及後續的版本,它是ECMA國際標準化組織制定的
   一項腳本語言的標準化規範
	 為什麼使用ES6?每一次標準的誕生都意味著語言的完善,功能的加強,JS語言本身也有一些令人不滿意的地方如:
	 1.變量提升特性增加了程序運行時不可預測性
	 2.語法過於鬆散,實現相同的功能,不同的人可能會寫出不同的代碼
92.let-->主要是用來替代var關鍵字  
	 1.ES6中新增用於聲明變量的關鍵字
	 2.let聲明的變量只在所處塊級作用域{}有效
		 好處:
		 (1)防止內部的變量覆蓋外部的變量		
		 (2)防止循環變量變成全局變量
				for (var i=0;i<2;i++){
				}
				console.log(i);  //2
				for (let i=0;i<2;i++){
				}	
				console.log(i);  //i is not defined
	 3.let和var最大區別:使用let關鍵字聲明的變量才具有塊級作用域,使用var聲明的變量不具有塊級作用域的特性
		 if (true){
		 	let num=10;
		 	var abc=20;
		 	}
		 console.log(num);  //num not defined
		 console.log(abc);  //20
	 4.使用let聲明的變量没有變量提升	
		 console.log(a);  //a is not defined
		 let a=10;
	 5.使用let聲明的變量具有暫時性死區的特性
		 var num=10;
		 if (true){
			 console.log(num);  //num is not defined
			 let num=20;
		 }
96.每次循環都會產生一個塊級作用域,每個塊級作用域中的變量都是不同的,當函數時執行時輸出的是自己上一級(循環產生
   的塊級作用域)作用域下的值。
97.const:作用是用來聲明常量(數),常量就是值(內存地址)不會變化的量,特點:
	1.具有塊級作用域		
	2.聲明常量時必須賦予初始值,否則報錯。
	3.常量賦值後,值不可修改,意即內存地址不可更改(基本數據類型),但複雜數據類型如array數組
	  const arry = [100,200];
		arry[0]=123;  //值可更改[123,200]
		arry=[1,2];  //重新賦值時會報錯,更改內存地址
100.let  const  var 的區別
	1.使用var聲明的變量,其作用域為該語句所在的函數內(函數作用域),且存在變量提升現象,值可更改
	2.使用let聲明的變量,其作用域為該語句所在的代碼塊{}內(塊級作用域),不存在變量提升現象,值可更改
	3.使用const聲明的是常量(塊級作用域),在後面出現的代碼中不可再修改該常量的值
101.解構賦值:分解數據結構,ES6中允許從數組中提取值,按照一一對應的位置,對變量賦值,對象也可以實現解構。
	1.數組解構:
		let [a,b,c]=[1,2,3];  let a=1,b=2,c=3; 等號左邊的[]代表數組解構,從數組中提取一一對應的值,再將值賦值給變量,
		如變量數目大於等號右邊的值時,會產生未賦值情況,呈現undefined
		console.log(a);  //1
		console.log(b);  //2
		console.log(c);  //3
	2.對象解構:等號左邊使用大括號表示對象解構,允許我們使用變量的名字匹配對象的屬性,匹配成功,將對象屬性的值賦值給變量
	  let person = {name: 'lisi', age: 30, sex: '男'};
		let { name, age, sex } = person;  對象解構 person.name 
		console.log(name)  //lisi
		console.log(age)   //30
		console.log(sex)   //男
		另一種寫法
		let person = {name: 'lisi', age: 30, sex: '男'};
		let {name: myName} = person;  name是用來匹配person對象中的name屬性,匹配成功,則將屬性值lisi賦值給myName變量
		console.log(myName)
104.箭頭函數:ES6中新增的用來簡化函數定義語法
		語法: () => {}   ()用來定義形參  {函數體}  內包含函數體
		const fn = () =>{  將箭頭函數賦值給fn常數  或使用let fn變量
			console.log(123)
		}
		fn()
	箭頭函數特性:
	1.函數體中只有一句代碼,且代碼的執行結果就是返回值,則可省略大括號
		const sum = (n1, n2) => n1 + n2;	//此處省略{}及return 
		const result = sum(10, 20);
		console.log(result);  //30
		相當於下面的函數
		function sum(n1,n2){
			return n1+n2;
		}	
		console.log(sum(10,20)); //30
	2.如果形參只有一個,可以省略小括號
	  const fn = v => v ;
	  fn(20);  //20
		相當於下面的函數
		function fn(x){
			return x;
		}
		console.log(fn(10));//10
105.箭頭函數不綁定this關鍵字,它没有自己的this關鍵字,箭頭函數中的this,指向的是函數定義位置的上下文this
		function fn(){
			console.log(this); // {name:'張三'}
			return () => {
				console.log(this)  // {name:'張三'}
			}
		}
		const obj = {name:'張三'};
		const resFn = fn.call(obj);
		resFn();
106.箭頭函數面試題:
		var obj={
			age:20,
			say:()=>{   //箭頭函數中的this指向的是函數定義位置中的對象,而obj不能產生作用域,因此為window全局作用域
				alert(this.age)  //this指向的是window,而window下没有age屬性,所以obj.say()得到的結果是undefined
			}
		}
		obj.say();  //undefined
107.剩餘參數:當實參個數大於形參個數時,可將剩餘形參放置在一數組中,利用...args來接收剩餘參數,
    語法允許我們將一個不定數量的參數表示為一個數組
		在箭頭函數中無法使用arguments,但可以使用...args剩餘參數來接收數量不定的形參
		function sum (first, ...args){
			console.log(first);  //10
			console.log(args);   //[20,30]
		}
		sum(10,20,30);

		const sum = (...args) => {
			let total = 0;
			args.forEach(item => {   //大括號可以省略 forEach(item => total += item)  
				total += item;
			})
			return total;         //forEach循環數組
		}
		console.log(sum(10.20)); //30
		console.log(sum(10,20,30)) //60
108.剩餘參數與解構配合使用
    let ary1 = ['张三', '李四', '王五'];
		let [s1, ...s2] = ary1;
		console.log(s1)   //s1='張三'
		console.log(s2)  //s2=['李四', '王五'] 數組解構,s2成為數組同時接收['李四','王五']
109.Array的擴展方法:
  1.擴展運算符(展開語法),與剩餘參數(將剩餘的參數放在一個數組中)相反
		擴展運算符可以將數組或對象轉為以逗號分隔的參數序列
		let ary =[1,2,3];
		console.log(...ary)  //1 2 3 與下面的代碼相同
		console.log("1","2","3")  //1 2 3 
110.擴展運算符可應用於合併數組
		方法一:
		let ary1 = [1, 2, 3];
		let ary2 = [4, 5, 6];
		// ...ary1 // 1, 2, 3
		// ...ary2 // 4, 5, 6
		let ary3 = [...ary1, ...ary2];//將ary1和ary2數組合併成ary3 = [1,2,3,4,5,6]
		console.log(ary3)  [1,2,3,4,5,6]		
		方法二:使用push()方法將ary2合併到ary1中  ary1.push(...ary2)
112.將類數組或可遍歷對象轉換為真正的數組
	let oDivs=document.getElementsByTagName('div);  //oDivs為偽數組
	var ary = [...oDivs];  利用擴展運算符將偽數組轉換為真正的數組,好處:即可使用數組的方法,如push
113.array.from方法
114.find()方法:用於找出第一個符合條件的數組成員,如果没有找到則返回undeined
115.findIndex()方法:用於找出第一個符合條件的數組成員的位置,如果没有找到則返回-1
116.includes()方法:表示某個數組是否包含給定的值,返回true 或false  ==>ES6以前使用indexOf
117.String擴展方法:
	1.模板字符串:ES6新增的創建字符串的方式,使用反引號定義之。
		特點:
		(1)可以解析變量,使用${變量名}來取代字符串拼接
		(2)模板字符串可以換行
		(3)在模板字符串中可以調用函數
	2.startsWith():表示參數字符串是否以某字符串開頭,返回布林值
	  endsWith():表示參數字符串是否以某字符串結尾,返回布林值
	3.repeat()方法:表示將原字符串重複n次,返回一個新字符串  原字符串.repeat(n)  'a'.repeat(2) //aa
120.Set數據結構:ES6中的新的數據結構Set,它類似於數組,但成員的都是唯一的,没有重複的值,主要應用於搜索關
    鍵字,利用值不重複特性,來存儲關鍵字
		Set本身是一個構造函數,用來生成Set數據結構,有一內建屬性size,存儲數據個數
121.利用Set作數組去重
122.數據操作:
	add(value):添加某個值,返回Set結構本身
	delete(value):刪除某個值,返回一個布林值,表示刪除是否成功
	has(value):判斷該值是否為Set的成員,返回一個布林值
	clear():清除所有成員,没有返回值  
123.遍歷:從中取值 使用forEach()方法    

		


