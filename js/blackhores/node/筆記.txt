109.04.15黑馬程序員node.js
01.Node開發概述
	1.為什麼要學習服務器端開發?
	  (1)能與後端程序密切配合
	  (2)前端技術需後端技術支撐(Ajax)
	  (3)擴展知識視野,以更高角度審視整個項目
	2.為什麼選擇Node
	  (1)使用JS語法開發後端應用
	  (2)因應公司要求需掌握Node開發技術
	  (3)生態系統活躍,有大量開源庫可以使用
	  (4)前端開發工具大多基於Node開發
02.Node運行環境搭建
	1.Node:是一個基於Chrome V8引擎的Javascript代碼運行環境
	2.下載Node.js並安裝,使用命令列輸入node -v檢查版本,並檢查環境變量是否已加入node.js路徑
04.Node.js快速入門
	1.Node.js組成:是由ECMA及Node環境提供的一些附加API組成的,包括文件、網路、路徑等一些更加強大的API
	2.Node.js基礎語法:
	  (1)所有ECMAScript語法在Node環境中均可使用
	  (2)在命令行要執行的文件需在同一個目錄夾下 執行node 檔案名
05.Node模組(塊)化開發
	1.JS在使用時存在兩大問題:文件之間的依賴關係不明確和命名衝突
	2.軟件中的模塊化開發:一個功能就是一個模塊,多個模塊可以組成完整應用,抽離一個模塊不會影響其他功能的運行。
06.Node.js模塊化開發規範
	1.Node.js規定一個JS文件就是一個模塊,模塊內部定義的變量和函數默認情況下在外部無法使用
	2.模塊內部可以使用exports對象進行成員導出,使用require()方法導入其他模塊
		a.js   a模塊中的加法函數可透過exports.加法=加法 暴露導出,然後在b模塊中利用require導入
		b.js   a模塊=require("a模塊的相對路徑")
		       a模塊.加法();
07.模塊成員導出的另一種方式:module.exports
        module.exports.version=version;
        module.exports.sayHi=sayHi;
    exports是module.exports的別名(地址引用關係),導出對象最終以module.exports為準
    (當exports對象和module.exports對象指向不同對象時,以module.exports為準)
08.系統模塊:Node運行環境所提供的API,因這些API都是以模塊化方式進行開發的,所以又稱為Node運行環境提供的API為系統模塊
    1.fs文件操作:f-->file  s-->system 文件操件系統
        const fs = require('fs');
       (1)讀取文件內容方法:fs.readFile('文件路徑/文件名稱'[,'文件編碼'],callback);
          callback回調函數,獲取文件讀取結果
          //讀取上一級css目錄下中的base.css
          fs.readFile('../css/base.css','utf-8',(err,doc) => {
          //如果文件讀取發生錯誤,參數err的值為錯誤對象,否則err的值為null
          //doc參數為文件內容
          if (err==null){
          //在控制台輸出文件內容
          console.log(doc);
          }
          });
       (2)寫入文件內容方法:fs.writeFile('文件路徑/文件名稱','數據',callback);
    2.系統模塊path操作:
        (1)為什麼要進行路拼接:不同操作系統的路徑分隔符不統一
           window使用/或\均可,但在linux只能使用/
        (2)路徑拼接語法: path.join('路徑','路徑',...)
           //導入path模塊
           const path=require('path');
           //路徑拼接
           let finialPath=path.join('itcast','a','b','c.css');
           //輸出結果itcast\a\b\c.css
           console.log(finialPath);

11.相對路徑VS絕對路徑
   - 大多數情況下使用絕對路徑,因為相對路徑有時相對的是命令行工具的當前工作目錄
   - 在讀取文件或者設置文件路徑時都會選擇絕對路徑
   - 使用__dirname獲取當前文件所在的絕對路徑

12.第三方模塊:別人寫好了,具有特定功能,能直接使用的模塊即為第三方模塊,由於第三方模塊通常由多個文件組成且被放置在一個文件夾中,所以又稱為包package
   - 第三方模塊有兩種存在形式
      + 以JS文件的形式存在,提供實現項具體功能的API接口。
      + 以命令行工具形式存在,輔助項目開發。
   - 如何獲取第三方模塊
      + npmjs.com :第三方模塊的存儲和分發倉庫 
        a.npm(node package manager)-->node的第三方模塊管理工具
        b.如何下載第三方模塊-->npm install 模塊名稱
        c.移除-->npm uninstall package 模塊名稱
      + 全局安裝和本地安裝
        a.命令行工具:全局安裝
        b.庫文件:本地安裝

13.第三方模塊nodemon-->是一個命令行工具,用來輔助項目開發
   - 在Node.js中,每次修改文件都需在命令行工具中重新執行該文件,非常繁瑣
   - 使用步驟:
      + 下載:使用npm install nodemon -g  -g:global全局安裝
      + 在命令行工具中使用nodemon命令替代node命令執行文件
   - nodemon 會持續監控檔案被修改狀態,如要停止監控ctrl+c

14.第三方模塊nrm(npm registry manager):npm 下載地址切換工具
   npm默認的下載地址在國外,國內下載速度較慢
   使用步驟:
      1.使用npm install nrm -g 下載安裝nrm
      2.查詢可用下載地址列表 nrm ls
      3.切換npm下載地址 nrm use 下載地址名稱

15.第三方模塊Gulp



