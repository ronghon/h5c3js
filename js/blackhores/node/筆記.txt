109.04.15node
01.Node開發概述
	1.為什麼要學習服務器端開發?
	  (1)能與後端程序密切配合
	  (2)前端技術需後端技術支撐(Ajax)
	  (3)擴展知識視野,以更高角度審視整個項目
	2.為什麼選擇Node
	  (1)使用JS語法開發後端應用
	  (2)因應公司要求需掌握Node開發技術
	  (3)生態系統活躍,有大量開源庫可以使用
	  (4)前端開發工具大多基於Node開發
02.Node運行環境搭建
	1.Node:是一個基於Chrome V8引擎的Javascript代碼運行環境
	2.下載Node.js並安裝,使用命令列輸入node -v檢查版本,並檢查環境變量是否已加入node.js路徑
04.Node.js快速入門
	1.Node.js組成:是由ECMA及Node環境提供的一些附加API組成的,包括文件、網路、路徑等一些更加強大的API
	2.Node.js基礎語法:
	  (1)所有ECMAScript語法在Node環境中均可使用
	  (2)在命令行要執行的文件需在同一個目錄夾下 執行node 檔案名
05.Node模組(塊)化開發
	1.JS在使用時存在兩大問題:文件之間的依賴關係不明確和命名衝突
	2.軟件中的模塊化開發:一個功能就是一個模塊,多個模塊可以組成完整應用,抽離一個模塊不會影響其他功能的運行。
06.Node.js模塊化開發規範
	1.Node.js規定一個JS文件就是一個模塊,模塊內部定義的變量和函數默認情況下在外部無法使用
	2.模塊內部可以使用exports對象進行成員導出,使用require()方法導入其他模塊
		a.js   a模塊中的加法函數可透過exports.加法=加法 暴露導出,然後在b模塊中利用require導入
		b.js   a模塊=require("a模塊的相對路徑")
		       a模塊.加法();
07.模塊成員導出的另一種方式:module.exports
        module.exports.version=version;
        module.exports.sayHi=sayHi;
    exports是module.exports的別名(地址引用關係),導出對象最終以module.exports為準
    (當exports對象和module.exports對象指向不同對象時,以module.exports為準)
08.系統模塊:Node運行環境所提供的API,因這些API都是以模塊化方式進行開發的,所以又稱為Node運行環境提供的API為系統模塊
    1.fs文件操作:f-->file  s-->system 文件操件系統
        const fs = require('fs');
       (1)讀取文件內內容方法:fs.readFile('文件路徑/文件名稱'[,'文件編碼'],callback);
       (2)寫入文件內容方法:fs.writeFile('文件路徑/文件名稱','數據',callback);





尚硅谷李立超node.js  109.8.3
03.nodejs簡介
  1.Nodejs是一個能在服務器端運行JS的開放源代碼、跨平台的JS運行環境。
  2.Node採用google開發的V8引擎運行JS代碼,使用事件驅動、非阻塞和異步I/O模型等技術提高性能,優化應用程序的傳輸量和規模。
  3.2009年Ryan Dahl利用nodejs解決高性能web服務器效能問題,使用chrome V8引擎,nodejs是單綫程

06.模塊化:
   - common JS規範:主要是為了彌補當前JS没有標準的缺陷,對模塊的定義十分簡單,包括:模塊引用、模塊定義、模塊標識。
   - 在node中,一個js文件就是一個模塊,在node中,透過require()函數引入外部其他模塊
     require("相對路徑")  相對路徑必須以./或../開頭,使用require()引入模塊後,該函數會返回一個對象,這個對象代表的是引入的模塊
   - 在Node中,每一個js文件中的js代碼都是獨立運行在一個函數中,而不是全局作用域,所以一個模塊中的變量和函數,在其他模塊中無法訪問,如果要向外部暴露屬性或方法,可以通過exports來暴露變量或方法,只需將要暴露給外部的變量或方法設置為exports的屬性即可,ex:
      exports.x="abc123";
      exports.y="bcd456";
      exports.fn=function(){}
  
  07.模塊引用:
      1.要引入其他的模塊使用require()函數,在require()中可以傳遞一個文件的路徑作為參數,node將會自動根據該路徑來引入外部模塊,如使用相對路徑,需以./或../開頭。
      2.使用require()引入模塊後,該函數會返回一個對象,這個對象代表的是引入的模塊
      3.使用require()引入外部模塊時,使用的是模塊標識,我們可以通過模塊標識來找到指定的模塊
  
  模塊分為兩大類
     1.核心模塊:由node引擎提供的模塊,核心模塊的標識就是模塊的名字
     2.文件模塊:由用戶自己創建的模塊,文件模塊的標識就是文件的路徑(相對或絕對路徑),相對路徑使用.或..開頭。

  在node中有一個全局對象global,它的作用和網頁中window類似,
    在全局中創建的變量都會作為global的屬性保存
    在全局中創建的函數都會作為global的方法保存

  當node在執行模塊中代碼時,它會首先在代碼的最頂部添加如下代碼
  function (exports,require,module,__filename,__dirname){
  在代碼的最底部,自動添加 
   }
  實際上模塊中的代碼都是包裝在一個函數中執行,並且在函數執行時,同時傳進了5個實參
    exports - 該對象用來將變量或函數暴露到外部
	require - 函數,用來引入外部的模塊
	module  - 代表的是當前模塊本身,而exports就是module的屬性,意即可使用exports導出,也可使用module.exports導出
	__filename - 當前模塊的完整路徑
	__dirname  - 當前模塊所在文件夾的完整路徑



