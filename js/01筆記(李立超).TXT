  捐ECMAScript
  chrome V8 engine
02===============================================================================================
 輸出語句: 
  alert() 警告框(提示框)
  document.write() 於HTML的Body內寫入資料
  console.log()  於chrome瀏覽器內控制台輸出一段內容
03===============================================================================================
  編寫位置
  1.行間
  2.<script>標籤內放於<head>內或</body>前
  3.用<script>外部引入，src連結===>建議使用
04===============================================================================================
  //單行註釋
  /* 多行註釋 */
  1.嚴格區分大小寫
  2.每一條語句以分號;結束
  3.忽略空格和換行
05字面量(常數)和變量==============================================================================
  1.不可改變的值,可以直接使用,但一般不會直接使用
  2.可用變數存放常數,即變數的值可任意改變
  var 聲明變量
  var a=123  a是變數、123是賦值 = 將123賦值給a
06標識符=========================================================================================
  (識別碼ID):可以由我們自主命名的均可稱之為標識符,如變量名、函數名、屬性名...
  1.首字母不能數字,可以是字母、數字、_、$
  2.不是關鍵字、保留字
  3.駝峰命名法:就是當變數名或函式名是由一個或多個單字連結在一起，而構
    成的唯一識別字時，第一個單字以小寫字母開始，第二個單字的首字母大寫
07數據類型(資料類型)==============================================================================
  1.String：字串 ==>使用引號括起來,單雙引均可,但不可混用,輸出時加引號表示字串,未加表示變量
  2.Number：數值
  3.Boolean：布林值
  4.Null 空值
  5.Undefined 未定義 ==>前五種為基本數據類型
  6.Object 物件;對象-->引用數據類型
08number類型======================================================================================
  typeof 變量  檢查變量類型
  Number.MAX_VALUE數值的最大值  Number.MIN_VALUE大於0的最小值
  Infinity 無窮大  Type=number
  NaN Not a number 非數字  Type=number
  在JS中執行浮點數運算時,可能得到一個不精確的結果
09boolean布林值==================================================================================
  true/false 邏輯判斷用
10null===========================================================================================
  null專門用來表示空對象 type=object
  undefined 1.未定義變量 2.未賦值  type=undefined  ==>未定義  
11類型轉換========================================================================================
  指將類型轉換為string、number、boolean 
  number轉string ==>
  1.調用xxx.toString()方法，該方法不會影響原變量，它會將轉換的結果返回，但是注意null and undefined 
    無法使用toString()轉換
  2.調用String(參數)函數,並將被轉換的數據作為參數傳遞給函數
    使用String()函數強制類型轉換時,對Number和Boolean而言是調用toString()方法，但對於Null和Undefined而
    言，就不會調用toString()方法,它會將null直接轉換為"null"、將undefined轉換為"undefined"
12將其他類型轉換為number==========================================================================
 1.調用Number()函數--類型均轉為Number,但值就不一定是原值
   **字串-->數字
     1.如是純數字的字串,則轉成數字
     2.字串中包含非數字,則轉成NaN
     3.字串中如為""空值或"  "包含空格字串,則轉為0
   **boolean-->數字
     1.true -->1
     2.false-->0
   **null---->數字
     null---->0
   **undefined-->數字
     undefined--->NaN
  2.專門用來轉換字串中的數字
    --parseInt()把字串中的有效的整數內容取出來,然後轉換為Number,由左到右判斷是否為數字,遇到非數字時就中止
    --parseFloat()把字串中有效的小數(含整數)取出來  
13二進位、八進位、十六進位=========================================================================
  0x開頭表示16進位,0~9abcdef
  0開頭表示8進位,0~7
  parseInt(a,10) 10表示以10進位方式轉換,8表示8進位方式轉換
14轉Boolean======================================================================================
  使用Boolean()函數
  1.數字-->Boolean 
    除了0和NaN外,其餘均為True
  2.字串-->Boolean
    除了空字串,其他均為True
  3.null和undefined均為false    
  4.object轉換後為True
15運算符(操作符)==================================================================================
  ex:typeof  + - * / 等通過運算符可以對一個或多個值進行運算,並獲取運算結果
     typeof 本身的返回值是string類型
  "+"意義有兩種  1.字串鏈接(先) 任何值與字串相加時,值均會先轉換為字串,然後再執行字串鏈接
                2.數字相加(後)
  a.如對非數字的類型的值進行運算時,會先轉換為數字然後再計算
  b.任何值與NaN相加後均為NaN
    ***隱式類型轉換為String字串方式
    var c=123;
    c=c+""    
  c.透過上述方式可以將任一個數據類型轉換為String
  d.任何值做 - * / 運算時都會先自動轉換為Number類型
  e.可藉由 -0  *1  /1等方式將任何值轉換為Number,其原理與Number()函數一樣(隱式類型轉換)
16一元運算符======================================================================
  對非數字的值轉換為Number,然後再運算
  可對其他數據類型使用+進行轉換為Number,其原理與Number()函數相同(隱式類型轉換)
17自增與自減======================================================================
  自增:使變量在自身基礎上增加1,分兩種a++、++a 變量自增後,原變量值會立即自增1
  無論是a++或是++a 均會立即使原變量的值自增1(對原變量而言作用相同),不同的是a++和++a本身的值不同
  a++本身的值等於自增前的值,console.log(a++)--->變量的原值(先賦值再加加)
  ++a本身的值等於自增後的值,console.log(++a)--->變量的新值(先加加再賦值)
  自減:使變量在自身基礎上減少1,分兩種a--、--a
  a--本身的值等於自減前的值,console.log(a--)--->變量的原值
  --a本身的值等於自減後的值,console.log(--a)--->變量的新值
19三種邏輯運算符1(Boolean)=====================================================================
  !  否 (NOT)--可用來對true進行取反否定, !true=false !!true=true !false=true
        對非Boolean值進行取反時,會先將其轉換為Boolean,然後再取反
        可以對任一數據類型取反兩次,將類型轉換為Boolean(隱式類型轉換),其原理與Boolean()函數相同
        var b="123";
        b=!!b;
  && 且(AND)--[找false],只要第一個值是false,就停止,直接傳回false,只有第一個值為true,再判斷第二個值是否為true 

  || 或(OR)--[找true],只要第一個值是true,就停止,直接傳回true,只有第一個值為false,再判斷第二個值是否為false
20三種邏輯運算符2(非Boolean)=============================================================================
  對非Boolean類型的數據會先轉換為Boolean,然後再運算,並且返回原值
  &&且--->如果兩個值均為True,則返回後面的值---如果第一個值為true,則返回第二個值
      --->如果兩個值中有false,則返回前面的值---如果第一個值為false,則返回第一個值
  ||或(OR)如果第一個值是true,就停止,直接傳回第一個值
          如果第一個值為false,則返回第二個值
21賦值運算符=============================================================================================
  = 賦值:將等號右側的值賦予給等號左邊的變數
  +=       a += 5--->a=a+5                a %= 5--->a=a%5
  -=       a -= 5--->a=a-5                a /= 5--->a=a/5
22關係運算符=============================================================================================
 比較兩個值的大小關係
 非Number數值類型比較-->1.對非數值進行比較時,會先將其轉換為Number再進行比較,但如果兩個均為字串作比較時,不會轉成Number
                         類型而是比較字串中字符的Unicode編碼且是一位一位進行比較===>可以用於英文名字排序
                       2.任何值與NaN比較時,結果均為false
                       3.如果比較兩個字串類型的數字時,一定要轉換類型可以用+號轉為Number,否則會出現不可預期結果
23Unicode=================================================================================================
  在字串中使用轉義字符輸入Unicode編碼 \u四位編碼
  在網頁中使用Unicode編碼&#編碼;  十進制
24相等運算符===============================================================================================
  = 賦值
  ==判斷兩個值是否相等  當使用==作判斷時,如兩個類型不同時,會自動進行類型轉換成相同類型再作比較判斷
  　判斷一個值是否為NaN 可以使用isNaN()函數
  !=不相等 當使用!=作判斷時,如兩個類型不同時,會自動進行類型轉換成相同類型再作比較判斷
  ===全等:用來判斷兩個值是否全等,包含值和類型,即不會自動作類型轉換,如果兩類型不同直接返回false
  !==不全等;用來判斷兩個值是否不全等,和不等類似,不同的是它不會自動作類型轉換,如果兩類型不同直接返回true
25條件運算符(三元(三目)運算符)====================================================================================
  ?:  --->語法: 條件表逹式 ? 語句1 : 語句2 --->先判斷條件表逹式是否成立,若為true(非0),則執行語句1,若為false時,則執行語句2
  判斷最大值 
	  var num1=20,num2=30;
		var max= num1>num2?num1:num2;
		alert(max);
  


