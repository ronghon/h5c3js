

===============================================================================
M-->modify
D-->delete
A-->add
U-->Untracked-->add-->暫存區-->commit-->本地庫-->push-->遠端庫-->pull下載本地庫

高見龍
-新增修改刪除檔案均可使用
  git add . 只會對當下目錄及子目錄執行才會有效果
  git add --all 不管在專案的那一層目錄執行都有效果
-git 分散式版本控制軟體--
  只在乎檔案內容,不在乎目錄或檔案名稱-->git其實只是個內容追蹤軟體
-分支只是一個指向某個commit的指標,所謂的分支,其實就只是一個40個字元的檔案而已
-HEAD只是指向某個分支的指標

彭彭教學youtube108.07.29基礎=====================================================
git init  初始化git repository git倉庫
git status 觀察Repository檔案追蹤狀況
git add 檔名或 git add . (或--all) -->將檔案加入追踨(index)清單中
git commit -m "版本更新訊息"  建立一組版本更新
git branch  查看分支(Branch)
git log 查看紀錄

GitHub雲端專案管理
git remote -v 查詢遠端的Repository,如為空白代表尚未作任何連結
git remote add  關聯名稱  遠程庫網址-->加入遠端的Repository,將本地端與遠端的空間作一連結
git remote rm 關聯名稱-->刪除與遠程庫關聯名稱
git remote rename 舊名 新名-->關聯名稱重新命名
git push 遠端空間的名稱 遠端空間的分支-->上傳到GitHub雲端專案空間

下載GitHub雲端專案到本機
git clone 遠端空間的網址 本機資料夾名稱 -->第一次下載GitHub雲端專案
git pull 遠端空間的名稱 遠端空間的分支-->從GitHub雲端專案下載合併更新

開發者協作的基本流程
code devol1 git pull-->coding-->end-->git add.->git commit-->git push-->code devol2 git pull-->coding...

git 應用開發詳解==================================================================================
第三講
* git與github、gitlab是不同的系統,github與gitlab均為服務器端版本管理庫,gitlab是公司內部自建的版本管理庫  
* git特性:
  -直接紀錄快照,而非差異比較
  -幾乎所有操作都在本地操作
  -隨時保持資料完整性
  -大多數操作僅添加數據
  -文件的三種狀態
   -已修改(modified):在工作目錄中修改了git文件-->untracked
   -已暫存(staged或index):對已修改的文件執行git暫存操作(git add),將文件存入暫存區
   -已提交(committed):將已暫存文件執行git提交操件(git commit),將文件存入本地庫
   
   GUI圖形介面工具使用SourceTree or Github Desktop 
   git init 本地端創建一個版本庫 
    內含一個.git 隠藏目錄夾,建議不要直接操作此目錄夾內的文件,否則會造成git錯亂,如將此目錄夾刪除(rm -rf .git),則會變成非git版本管理內容 
        
第四講git 重要命令操作
  git log查看提交歷史紀錄
  git log -n 查看最後n筆提交歷史紀錄
  git log --oneline 
  -git提交的id(commit id)是一個摘要值,這個值實際上是一個sha1計算出來的hash
  -user.name和user.email,有三個地方可設置
    git config --global user.name 'name'   
    git config --global user.email 'email'
    git config --global --unset user.name -->刪除user.name
    1./etc/gitconfig(幾乎不會使用)-->git config --system 針對整個操作系統
    2.~/.gitconfig(很常用)-->git config --global 針對特定login 用戶  
    3.在.git/config文件中-->git config --local 針對特定版本倉庫項目   上述三個均配置時,優先使用local內的資訊
  -git checkout -- 檔名 捨棄文件變更,小心使用,因尚未提交到本地庫,如捨棄變更將回到尚未變更前狀態,則所有變更會重來。
  -git reset HEAD 檔名-->會使檔案從暫存區又回到工作區(unstage)
  
第五講git添加、刪除、修改與日誌
  git rm 檔名
    1.刪除了一個文件
    2.將刪除檔案資訊提交
   若要恢復被刪除的文件,需進行下列兩個動作:
    1.git reset HEAD 檔名-->將待刪除的文件從暫存區恢復到工作區
    2.git checkout -- 檔名-->將工作區中的修改捨棄掉
  rm(mv) 檔名:在terminal下刪除檔案
    1.工作區階段,直接將檔案刪除,無法回退
    2.暫存區階段,雖將檔名刪除掉,但可藉由回退方式將修改部份放棄回到未修改前狀態

  git mv 與 mv :其作用與git rm及rm作用相同  
    git mv 原檔名 新檔名

第六講.gitignore與分支
  - .gitignore:將要忽略文件不需git track的檔案,加到.gitignore檔案中,該檔案雖存在當前目錄中,但被ignore
    支援正則表逹式模式  
  - 分支管理
    -master主分支
    -git branch 查詢分支狀況 有*代表目前分支位置
      git branch -v 查詢最近一條commit的內容
    -git branch 新分支名-->創建新的分支,並將master內的檔案copy一份到新的分支中,
    -git checkout 新分支名-->切換至新分支,可使用 - 切換回原分支,在新分支所創建或修改的文件與master下的
     文件不同,會新增新的文件
    -git checkout -b 新分支名-->創建新分支名同時切換到新分支下工作
    *git checkout -b 分支名 關聯名稱/分支名-->從遠程庫的分支創建本地庫新的分支
第七講分支重要操作
    -git branch -d 待刪除分支名-->刪除分支,不可刪除當前所處分支,分支內容如有新增或修改內容時,則會要求先合併,
     如要強制刪除時使用下列命令
      -git branch -D 分支名  慎用:強制刪除分支-->應先merge 合併
    -git merge 要合併的分支名-->在master主分支上將另一分支之新增或修改的內容合併到master上(無合併衝突下使用fast-forward)
    合併衝突時,會要求手動合併,然後再git add ..  (add表示解決衝突後新增一筆修改的commit) 
    -git push --delete 關聯名稱 分支名-->刪除遠程庫分支

第八講分支進階與版本回退
    HEAD指向的是當前分支-->.git/HEAD檔案內列出HEAD當前位置
    master指向的是提交
    -fast-forward(ff),如果可能,合併分支時git會使用fast-forward(快進)模式
      -在這模式下,刪除分支時會丟掉分支信息
      -合併時,如加上--no-ff參數時,會禁用fast-forward,這樣會多出一條commit id(會紀錄本次merge commit)
        git merge --no-ff 分支名
    -查看log時可加上--graph表示使用圖形化查看分支狀況
    版本回退--
    
第九講checkout進階與stash
  -git checkout -- 檔名-->作用是捨棄工作區中最後一次內容變更回復到未變更前狀態(內容改變)
  -git reset HEAD 檔名-->作用是將檔案add到暫存區的狀態回復到工作區(狀態改變)
  -git commit -am "message"-->結合git add和git commit兩個步驟的簡寫方式,於檔案內容修改後直接從工作區提交到本地庫
  -git branch -m 舊名 新名-->修改分支名稱
  -git stash 臨時保存
  -git stash list列出臨時保存的檔案
  -git stash pop-->將臨時保存的檔案取出並刪除臨時保存的紀錄
  -git stash apply-->將臨時保存的檔案取出但未刪除紀錄-->手動刪除紀錄git stash drop stash@{0}
  -git stash apply stash@{1}-->指定取出臨時保存的檔案

第十講標籤tag與diff
  標籤區分為兩種--標籤是不存在於特定分支,在任何分支查看時均可獲得當前版本號
    -輕量級-->git tag 版本號
    -帶有附註標籤-->git tag -a 版本號 -m '版本註釋' 
    -查看目前標籤-->git tag 也可以加上 -l '條件'
    -刪除標籤-->git tag -d 版本號
  git blame 檔案名-->查看檔案修改過程及修改者是誰,何時修改等資料
  diff差異性比較
第十一講遠程庫與gitHub
  push 推送
  pull 提取,同時會執行合併merge
  pull = fetch + merge
  gitlab-->區域網路內部類似github之版本控制中心
  將創建好的本地庫推送到github流程
  1.先在github創建一個新的版本庫
  2.git remote add origin 遠程庫URL -->新增遠程庫關連地址 並以origin別名取代遠程庫URL
  3.git push -u origin master -->將本地庫與遠程庫master作一關聯並推送到遠程庫
	git push --ff origin master 允許強制快進
  git remote show 顯示遠程庫的別名,代表遠程庫地址
  git remote show origin 顯示遠程庫詳細資訊

udemy git入門=========================================================================================
  git stash可以臨時保存未提交的修改,包括工作區和暫存區的修改
   git stash save "message" 針對暫存區臨時保存修改
   git stash -u save "message"針對工作區中untracked檔案臨時保存
   git stash -a save "message"針對.gitignore忽略文件的臨時保存

   git stash list 查看目前stash狀態
   git stash apply恢復修改
   git stash applly stash@{0}有多個時可指定恢復那一個,{0}用git stash list查詢之

  git diff差異比較:兩個數據源之間的差異,可以是文件、提交、分支或所有改變的差異比較
    git diff-->比較暫存區與工作區之檔案內容差異,前/暫存區,後/工作區
    git diff HEAD -->比較最新提交本地庫與工作區之間的內容差異
    git diff --cached-->比較最新提交本地庫與暫存區之間的內容差異 
    git diff <commit_id> <commit_id>-->比較兩個提交之間的內容差異
    git diff <branch_name><branch_name>-->比較兩個分支檔案及內容之間的差異
  git blame 對倉庫中文件發現每一行的最後修改者信息
   git blame <file>
  撤銷修改
    在工作區階段-
      1.對於新添加的文件-->git clean -if 檔名-->刪除新添加的檔案  -id -->刪除目錄及檔案
      2.修改存在的文件、刪除文件-->git checkout --檔名
    暫存區(已git add)-git reset
      1.撤銷退回工作區(可再修改)-->git reset HEAD
      2.捨棄修改(修改部份直接捨棄不要)-->git reset --hard HEAD-->慎用,否則心血都没了
    已提交本地庫-git revert HEAD,會將HEAD指針向前新增一筆紀錄,但資料會回復到未修改前狀態 
    -git revert HEAD vs git reset --hard HEAD兩者差異
        git revert HEAD 是將HEAD指針向前新增一筆紀錄並將當前資料回復到未修改前狀態,較安全有紀錄
        git reset --hard HEAD~1是直接捨棄本次修改回復到未修改前狀態,會將已提交的紀錄刪除HEAD指針回到前一筆紀錄
    -git rm僅適用於檔案狀態於暫存區及已提交本地庫狀態
     檔案在本地庫狀態時使用git rm 檔名-->從本地庫退回到暫存區並新增一筆刪除紀錄,此時只需將該筆刪除紀錄commit即可。
     檔案在暫存區狀態時使用git rm -f 檔名-->強制直接從暫存區捨棄掉(檔案刪除)
     檔案在暫存區狀態時使用git rm --cached 檔名-->從暫存區退回到工作區(狀態改變,可再修改

  第六章遠程庫管理   
  1.從遠端github倉庫下載本地端程序:
    git remote add <name> 遠程庫網址-->創建本地端與遠程庫關聯,以利與遠程庫同步化  git remote add origin git@github.com
    git clone 遠程庫網址 目錄夾-->第一次從遠程庫下載檔案 
    git pull = git fetch + git merge
    git pull --rebase 在執行git pull指令的時候,也可以再加上 --rebase參數,它在fetch完成之後,便會使用Rebase方式進行合併：
              如果你不想要這個額外的Commit,可考慮使用Rebase方式來進行合併
  2.將本地庫倉庫推送到遠程倉庫
    git push -u origin master

terminal終端機常用指令(linux命名)
mkdir name  創建name目錄夾
pwd 顯示目前所在目錄
ll 或ls 查詢目錄 -al含隠藏目錄及檔案
touch 檔案名  建立一個空白檔案,如已存在時則僅會變修改時間,原內容不會變更
cat 檔名-->查看檔案內容
mv 原檔名 新檔名 
rm 檔名  or rm *.*刪除有檔案
cp 原檔名  另一檔案名 copy原檔名到另一檔名
clear 畫面清除 ctrl+L
which  命令-->查詢命令在那一個目錄下
cd - 回到上次命令目錄

**使用ssh登入驗證程序
ssh-keygen -t rsa -C "email"  /*創建email的私鑰
  eval $(ssh-agent -s)  /*start the ssh-agent in the background
  ssh-add ~/.ssh/id_rsa  /*將ssh key加入到ssh-agent
code ~/.ssh/id_rsa.pub /*進入公鑰檔,copy到新增的ssh檔
ssh -T git@github.com /*確認公鑰已成功加入

更換Git遠端伺服器倉庫網址,使用：git remote set-url
git remote set-url origin 新的遠端伺服器網址https://git.github/